{
  "address": "0xF44B36992B96043128A3240744Bfe9b070a098Fa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "accountId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "wiseTagHash",
          "type": "bytes32"
        }
      ],
      "name": "AccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        }
      ],
      "name": "AllowlistEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registrationProcessor",
          "type": "address"
        }
      ],
      "name": "NewAccountRegistrationProcessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registrationProcessor",
          "type": "address"
        }
      ],
      "name": "NewOffRamperRegistrationProcessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "accountId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "offRampId",
          "type": "bytes32"
        }
      ],
      "name": "OffRamperRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "allowedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserAddedToAllowlist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserAddedToDenylist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "allowedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserRemovedFromAllowlist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "approvedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserRemovedFromDenylist",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountRegistrationProcessor",
      "outputs": [
        {
          "internalType": "contract IWiseAccountRegistrationProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "addAccountToDenylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_allowedUsers",
          "type": "bytes32[]"
        }
      ],
      "name": "addAccountsToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "accountId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "offRampId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "wiseTagHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IWiseAccountRegistry.AccountInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAllowedUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDeniedUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWiseAccountRegistrationProcessor",
          "name": "_accountRegistrationProcessor",
          "type": "address"
        },
        {
          "internalType": "contract IWiseOffRamperRegistrationProcessor",
          "name": "_offRamperRegistrationProcessor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_allowedUser",
          "type": "bytes32"
        }
      ],
      "name": "isAllowedUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAllowlistEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "isDeniedUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offRamperRegistrationProcessor",
      "outputs": [
        {
          "internalType": "contract IWiseOffRamperRegistrationProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "endpoint",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "host",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "profileId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "wiseTagHash",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "userAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct IWiseAccountRegistrationProcessor.RegistrationData",
              "name": "public_values",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "internalType": "struct IWiseAccountRegistrationProcessor.RegistrationProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "endpoint",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "host",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "profileId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "mcAccountId",
                  "type": "string"
                }
              ],
              "internalType": "struct IWiseOffRamperRegistrationProcessor.OffRamperRegistrationData",
              "name": "public_values",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "internalType": "struct IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "registerAsOffRamper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_approvedUser",
          "type": "bytes32"
        }
      ],
      "name": "removeAccountFromDenylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_disallowedUsers",
          "type": "bytes32[]"
        }
      ],
      "name": "removeAccountsFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWiseAccountRegistrationProcessor",
          "name": "_registrationProcessor",
          "type": "address"
        }
      ],
      "name": "setAccountRegistrationProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWiseOffRamperRegistrationProcessor",
          "name": "_registrationProcessor",
          "type": "address"
        }
      ],
      "name": "setOffRamperRegistrationProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x692a72a41a4dd7d5adbf6ffe72053d8e2ec765436b86b3136d90be119a778c5b",
  "receipt": {
    "to": null,
    "from": "0x4e39cF8578698131c57404e8bc3eEC820EDa51d8",
    "contractAddress": "0xF44B36992B96043128A3240744Bfe9b070a098Fa",
    "transactionIndex": 29,
    "gasUsed": "1454164",
    "logsBloom": "0x
    "blockHash": "0x0ca9bc72184d7cdde00eda3b745f82c826365be52ecf282a3b1b9b815e446f72",
    "transactionHash": "0x692a72a41a4dd7d5adbf6ffe72053d8e2ec765436b86b3136d90be119a778c5b",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 5635193,
        "transactionHash": "0x692a72a41a4dd7d5adbf6ffe72053d8e2ec765436b86b3136d90be119a778c5b",
        "address": "0xF44B36992B96043128A3240744Bfe9b070a098Fa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x0ca9bc72184d7cdde00eda3b745f82c826365be52ecf282a3b1b9b815e446f72"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 5635193,
        "transactionHash": "0x692a72a41a4dd7d5adbf6ffe72053d8e2ec765436b86b3136d90be119a778c5b",
        "address": "0xF44B36992B96043128A3240744Bfe9b070a098Fa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8",
          "0x0000000000000000000000004e39cf8578698131c57404e8bc3eec820eda51d8"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x0ca9bc72184d7cdde00eda3b745f82c826365be52ecf282a3b1b9b815e446f72"
      }
    ],
    "blockNumber": 5635193,
    "cumulativeGasUsed": "4657554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4e39cF8578698131c57404e8bc3eEC820EDa51d8"
  ],
  "numDeployments": 1,
  "solcInputHash": "0de631e329f560f49e3d6a21d19a30cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"accountId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"wiseTagHash\",\"type\":\"bytes32\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"}],\"name\":\"AllowlistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registrationProcessor\",\"type\":\"address\"}],\"name\":\"NewAccountRegistrationProcessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registrationProcessor\",\"type\":\"address\"}],\"name\":\"NewOffRamperRegistrationProcessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"accountId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"offRampId\",\"type\":\"bytes32\"}],\"name\":\"OffRamperRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"allowedUser\",\"type\":\"bytes32\"}],\"name\":\"UserAddedToAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deniedUser\",\"type\":\"bytes32\"}],\"name\":\"UserAddedToDenylist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"allowedUser\",\"type\":\"bytes32\"}],\"name\":\"UserRemovedFromAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"approvedUser\",\"type\":\"bytes32\"}],\"name\":\"UserRemovedFromDenylist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountRegistrationProcessor\",\"outputs\":[{\"internalType\":\"contract IWiseAccountRegistrationProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_deniedUser\",\"type\":\"bytes32\"}],\"name\":\"addAccountToDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_allowedUsers\",\"type\":\"bytes32[]\"}],\"name\":\"addAccountsToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"accountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offRampId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"wiseTagHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWiseAccountRegistry.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAllowedUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDeniedUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWiseAccountRegistrationProcessor\",\"name\":\"_accountRegistrationProcessor\",\"type\":\"address\"},{\"internalType\":\"contract IWiseOffRamperRegistrationProcessor\",\"name\":\"_offRamperRegistrationProcessor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_allowedUser\",\"type\":\"bytes32\"}],\"name\":\"isAllowedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAllowlistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_deniedUser\",\"type\":\"bytes32\"}],\"name\":\"isDeniedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offRamperRegistrationProcessor\",\"outputs\":[{\"internalType\":\"contract IWiseOffRamperRegistrationProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profileId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"wiseTagHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"internalType\":\"struct IWiseAccountRegistrationProcessor.RegistrationData\",\"name\":\"public_values\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct IWiseAccountRegistrationProcessor.RegistrationProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"endpoint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"host\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profileId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mcAccountId\",\"type\":\"string\"}],\"internalType\":\"struct IWiseOffRamperRegistrationProcessor.OffRamperRegistrationData\",\"name\":\"public_values\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"registerAsOffRamper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_approvedUser\",\"type\":\"bytes32\"}],\"name\":\"removeAccountFromDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_disallowedUsers\",\"type\":\"bytes32[]\"}],\"name\":\"removeAccountsFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWiseAccountRegistrationProcessor\",\"name\":\"_registrationProcessor\",\"type\":\"address\"}],\"name\":\"setAccountRegistrationProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWiseOffRamperRegistrationProcessor\",\"name\":\"_registrationProcessor\",\"type\":\"address\"}],\"name\":\"setOffRamperRegistrationProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAccountToDenylist(bytes32)\":{\"params\":{\"_deniedUser\":\"accountId being banned\"}},\"addAccountsToAllowlist(bytes32[])\":{\"params\":{\"_allowedUsers\":\"List of accountIds allowed to signal intents on the user's deposit\"}},\"initialize(address,address)\":{\"params\":{\"_accountRegistrationProcessor\":\"Account Registration processor address\",\"_offRamperRegistrationProcessor\":\"Off-ramper Registration processor address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(((string,string,string,string,address),bytes))\":{\"params\":{\"_proof\":\"Registration proof consisting of unredacted data being notarized and a signature\"}},\"registerAsOffRamper(((string,string,string,string),bytes))\":{\"params\":{\"_proof\":\"Registration proof consisting of unredacted data being notarized and a signature\"}},\"removeAccountFromDenylist(bytes32)\":{\"params\":{\"_approvedUser\":\"accountId being approved\"}},\"removeAccountsFromAllowlist(bytes32[])\":{\"params\":{\"_disallowedUsers\":\"List of accountIds being approved\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAccountRegistrationProcessor(address)\":{\"params\":{\"_registrationProcessor\":\"New registration proccesor address\"}},\"setOffRamperRegistrationProcessor(address)\":{\"params\":{\"_registrationProcessor\":\"New registration proccesor address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAccountToDenylist(bytes32)\":{\"notice\":\"Adds an accountId to a depositor's deny list. If an address associated with the banned accountId attempts to signal an intent on the user's deposit they will be denied.\"},\"addAccountsToAllowlist(bytes32[])\":{\"notice\":\"Adds passed accountIds to a depositor's allow list. All addresses associated with the allowed accountIds will be able to signal intents on the user's deposit.\"},\"enableAllowlist()\":{\"notice\":\"Enables allow list for user, only users on the allow list will be able to signal intents on the user's deposit.\"},\"initialize(address,address)\":{\"notice\":\"Initialize Ramp with the addresses of the Processors\"},\"register(((string,string,string,string,address),bytes))\":{\"notice\":\"Registers a new account by pulling the profileId from the proof and assigning the account owner to the sender of the transaction.\"},\"registerAsOffRamper(((string,string,string,string),bytes))\":{\"notice\":\"Registers an account for off-ramping by pulling the multi-currency account id from the proof and assigning the account owner to the sender of the transaction.\"},\"removeAccountFromDenylist(bytes32)\":{\"notice\":\"Removes an accountId from a depositor's deny list.\"},\"removeAccountsFromAllowlist(bytes32[])\":{\"notice\":\"Removes an passed accountId's from allow list. If allow list is enabled only users on the allow list will be able to signal intents on the user's deposit.\"},\"setAccountRegistrationProcessor(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the account registration processor address used for validating and interpreting tls proofs.\"},\"setOffRamperRegistrationProcessor(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the off ramper registration processor address used for validating and interpreting tls proofs.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ramps/wise/WiseAccountRegistry.sol\":\"WiseAccountRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/external/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x102021415f8444ff563fc6d0082f39296f47c09ce73fb4cd642e700ac489eefe\",\"license\":\"Apache-2.0\"},\"contracts/ramps/wise/WiseAccountRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Bytes32ArrayUtils } from \\\"../../external/Bytes32ArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"../../external/Uint256ArrayUtils.sol\\\";\\n\\nimport { IWiseAccountRegistrationProcessor } from \\\"./interfaces/IWiseAccountRegistrationProcessor.sol\\\";\\nimport { IWiseAccountRegistry } from \\\"./interfaces/IWiseAccountRegistry.sol\\\";\\nimport { IWiseOffRamperRegistrationProcessor } from \\\"./interfaces/IWiseOffRamperRegistrationProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract WiseAccountRegistry is IWiseAccountRegistry, Ownable {\\n    using Bytes32ArrayUtils for bytes32[];\\n    using Uint256ArrayUtils for uint256[];\\n\\n    /* ============ Events ============ */\\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed accountId, bytes32 indexed wiseTagHash);\\n    event OffRamperRegistered(address indexed accountOwner, bytes32 indexed accountId, bytes32 indexed offRampId);\\n\\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\\n\\n    event AllowlistEnabled(bytes32 listOwner);\\n    event UserAddedToAllowlist(bytes32 indexed listOwner, bytes32 allowedUser);\\n    event UserRemovedFromAllowlist(bytes32 indexed listOwner, bytes32 allowedUser);\\n\\n    event NewAccountRegistrationProcessorSet(address registrationProcessor);\\n    event NewOffRamperRegistrationProcessorSet(address registrationProcessor);\\n\\n    /* ============ Structs ============ */\\n\\n    struct DenyList {\\n        bytes32[] deniedUsers;              // Array of accountIds that are denied from taking depositors liquidity\\n        mapping(bytes32 => bool) isDenied;  // Mapping of accountId to boolean indicating if the user is denied\\n    }\\n\\n    struct AllowList {\\n        bool isEnabled;                     // Boolean indicating if the allowlist is enabled\\n        bytes32[] allowedUsers;             // Array of accountIds that are allowed from taking depositors liquidity\\n        mapping(bytes32 => bool) isAllowed; // Mapping of accountId to boolean indicating if the user is allowed\\n    }\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRegisteredUser() {\\n        require(isRegisteredUser(msg.sender), \\\"Caller must be registered user\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    IWiseAccountRegistrationProcessor public accountRegistrationProcessor;      // Address of Account registration processor contract\\n    IWiseOffRamperRegistrationProcessor public offRamperRegistrationProcessor;  // Address of Off-ramper registration processor contract\\n\\n    bool public isInitialized;                                                  // Indicates if contract has been initialized\\n\\n    mapping(address => AccountInfo) internal accounts;                          // Mapping of Ethereum accounts to their account information (IDs and deposits)\\n    mapping(bytes32 => DenyList) internal denyList;                             // Mapping of accountId to denylist\\n    mapping(bytes32 => AllowList) internal allowList;                           // Mapping of accountId to allow list\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _owner\\n    )\\n        Ownable()\\n    {\\n        transferOwnership(_owner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Initialize Ramp with the addresses of the Processors\\n     *\\n     * @param _accountRegistrationProcessor     Account Registration processor address\\n     * @param _offRamperRegistrationProcessor   Off-ramper Registration processor address\\n     */\\n    function initialize(\\n        IWiseAccountRegistrationProcessor _accountRegistrationProcessor,\\n        IWiseOffRamperRegistrationProcessor _offRamperRegistrationProcessor\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n\\n        accountRegistrationProcessor = _accountRegistrationProcessor;\\n        offRamperRegistrationProcessor = _offRamperRegistrationProcessor;\\n\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * @notice Registers a new account by pulling the profileId from the proof and assigning the account owner to the\\n     * sender of the transaction.\\n     *\\n     * @param _proof    Registration proof consisting of unredacted data being notarized and a signature\\n     */\\n    function register(\\n        IWiseAccountRegistrationProcessor.RegistrationProof calldata _proof\\n    )\\n        external\\n    {\\n        require(msg.sender == _proof.public_values.userAddress, \\\"Caller must be address specified in proof\\\");\\n        require(accounts[msg.sender].accountId == bytes32(0), \\\"Account already associated with accountId\\\");\\n        (\\n            bytes32 accountId,\\n            bytes32 wiseTagHash\\n        ) = _verifyRegistrationProof(_proof);\\n\\n        accounts[msg.sender].accountId = accountId;\\n        accounts[msg.sender].wiseTagHash = wiseTagHash;\\n\\n        emit AccountRegistered(msg.sender, accountId, wiseTagHash);\\n    }\\n\\n    /**\\n     * @notice Registers an account for off-ramping by pulling the multi-currency account id from the proof and assigning\\n     * the account owner to the sender of the transaction.\\n     *\\n     * @param _proof    Registration proof consisting of unredacted data being notarized and a signature\\n     */\\n    function registerAsOffRamper(\\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof calldata _proof\\n    )\\n        external\\n        onlyRegisteredUser\\n    {\\n        require(accounts[msg.sender].offRampId == bytes32(0), \\\"Account already associated with offRampId\\\");\\n        (\\n            bytes32 accountId,\\n            bytes32 offRampId\\n        ) = _verifyOffRamperRegistrationProof(_proof);\\n\\n        accounts[msg.sender].offRampId = offRampId;\\n\\n        emit OffRamperRegistered(msg.sender, accountId, offRampId);\\n    }\\n\\n    /**\\n     * @notice Adds an accountId to a depositor's deny list. If an address associated with the banned accountId attempts to\\n     * signal an intent on the user's deposit they will be denied.\\n     *\\n     * @param _deniedUser   accountId being banned\\n     */\\n    function addAccountToDenylist(bytes32 _deniedUser) external onlyRegisteredUser {\\n        bytes32 denyingUser = accounts[msg.sender].accountId;\\n\\n        require(!denyList[denyingUser].isDenied[_deniedUser], \\\"User already on denylist\\\");\\n\\n        denyList[denyingUser].isDenied[_deniedUser] = true;\\n        denyList[denyingUser].deniedUsers.push(_deniedUser);\\n\\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\\n    }\\n\\n    /**\\n     * @notice Removes an accountId from a depositor's deny list.\\n     *\\n     * @param _approvedUser   accountId being approved\\n     */\\n    function removeAccountFromDenylist(bytes32 _approvedUser) external onlyRegisteredUser {\\n        bytes32 approvingUser = accounts[msg.sender].accountId;\\n\\n        require(denyList[approvingUser].isDenied[_approvedUser], \\\"User not on denylist\\\");\\n\\n        denyList[approvingUser].isDenied[_approvedUser] = false;\\n        denyList[approvingUser].deniedUsers.removeStorage(_approvedUser);\\n\\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\\n    }\\n\\n    /**\\n     * @notice Enables allow list for user, only users on the allow list will be able to signal intents on the user's deposit.\\n     */\\n    function enableAllowlist() external onlyRegisteredUser {\\n        bytes32 allowingUser = accounts[msg.sender].accountId;\\n\\n        require(!allowList[allowingUser].isEnabled, \\\"Allow list already enabled\\\");\\n\\n        allowList[allowingUser].isEnabled = true;\\n\\n        emit AllowlistEnabled(allowingUser);\\n    }\\n\\n    /**\\n     * @notice Adds passed accountIds to a depositor's allow list. All addresses associated with the allowed accountIds will\\n     * be able to signal intents on the user's deposit.\\n     *\\n     * @param _allowedUsers   List of accountIds allowed to signal intents on the user's deposit\\n     */\\n    function addAccountsToAllowlist(bytes32[] memory _allowedUsers) external onlyRegisteredUser {\\n        bytes32 allowingUser = accounts[msg.sender].accountId;\\n\\n        for(uint256 i = 0; i < _allowedUsers.length; i++) {\\n            bytes32 allowedUser = _allowedUsers[i];\\n\\n            require(!allowList[allowingUser].isAllowed[allowedUser], \\\"User already on allowlist\\\");\\n\\n            allowList[allowingUser].isAllowed[allowedUser] = true;\\n            allowList[allowingUser].allowedUsers.push(allowedUser);\\n\\n            emit UserAddedToAllowlist(allowingUser, allowedUser);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes an passed accountId's from allow list. If allow list is enabled only users on the allow list will be\\n     * able to signal intents on the user's deposit.\\n     *\\n     * @param _disallowedUsers   List of accountIds being approved\\n     */\\n    function removeAccountsFromAllowlist(bytes32[] memory _disallowedUsers) external onlyRegisteredUser {\\n        bytes32 disallowingUser = accounts[msg.sender].accountId;\\n\\n        for(uint256 i = 0; i < _disallowedUsers.length; i++) {\\n            bytes32 disallowedUser = _disallowedUsers[i];\\n\\n            require(allowList[disallowingUser].isAllowed[disallowedUser], \\\"User not on allowlist\\\");\\n\\n            allowList[disallowingUser].isAllowed[disallowedUser] = false;\\n            allowList[disallowingUser].allowedUsers.removeStorage(disallowedUser);\\n\\n            emit UserRemovedFromAllowlist(disallowingUser, disallowedUser);\\n        }\\n    }\\n\\n    /* ============ Governance Functions ============ */\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the account registration processor address used for validating and interpreting tls proofs.\\n     *\\n     * @param _registrationProcessor   New registration proccesor address\\n     */\\n    function setAccountRegistrationProcessor(IWiseAccountRegistrationProcessor _registrationProcessor) external onlyOwner {\\n        accountRegistrationProcessor = _registrationProcessor;\\n        emit NewAccountRegistrationProcessorSet(address(_registrationProcessor));\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the off ramper registration processor address used for validating and interpreting tls proofs.\\n     *\\n     * @param _registrationProcessor   New registration proccesor address\\n     */\\n    function setOffRamperRegistrationProcessor(IWiseOffRamperRegistrationProcessor _registrationProcessor) external onlyOwner {\\n        offRamperRegistrationProcessor = _registrationProcessor;\\n        emit NewOffRamperRegistrationProcessorSet(address(_registrationProcessor));\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\\n        return accounts[_account];\\n    }\\n\\n    function getAccountId(address _account) public view returns (bytes32) {\\n        return accounts[_account].accountId;\\n    }\\n\\n    function isRegisteredUser(address _account) public view returns (bool) {\\n        return getAccountId(_account) != bytes32(0);\\n    }\\n\\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\\n        return denyList[getAccountId(_account)].deniedUsers;\\n    }\\n\\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\\n        return denyList[getAccountId(_account)].isDenied[_deniedUser];\\n    }\\n\\n    function isAllowlistEnabled(address _account) external view returns (bool) {\\n        return allowList[getAccountId(_account)].isEnabled;\\n    }\\n\\n    function getAllowedUsers(address _account) external view returns (bytes32[] memory) {\\n        return allowList[getAccountId(_account)].allowedUsers;\\n    }\\n\\n    function isAllowedUser(address _account, bytes32 _allowedUser) external view returns (bool) {\\n        bytes32 allowingUser = getAccountId(_account);\\n\\n        // Deny list overrides, if user on deny list then they are not allowed\\n        if(denyList[allowingUser].isDenied[_allowedUser]) { return false; }\\n\\n        // Check if allow list is enabled, if so return status of user, else return true\\n        return allowList[allowingUser].isEnabled ? allowList[allowingUser].isAllowed[_allowedUser] : true;\\n    }\\n    \\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Validate the user has an Wise account, we do not nullify this email since it can be reused to register under\\n     * different addresses.\\n     */\\n    function _verifyRegistrationProof(\\n        IWiseAccountRegistrationProcessor.RegistrationProof calldata _proof\\n    )\\n        internal\\n        returns(bytes32 accountId, bytes32 wiseTagHash)\\n    {\\n        (\\n            accountId,\\n            wiseTagHash\\n        ) = accountRegistrationProcessor.processProof(_proof);\\n    }\\n\\n    /**\\n     * @notice Validate the user has an Wise account, we do not nullify this email since it can be reused to register under\\n     * different addresses.\\n     */\\n    function _verifyOffRamperRegistrationProof(\\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof calldata _proof\\n    )\\n        internal\\n        returns(bytes32 accountId, bytes32 offRampId)\\n    {\\n        (\\n            accountId,\\n            offRampId\\n        ) = offRamperRegistrationProcessor.processProof(_proof);\\n\\n        require(accountId == accounts[msg.sender].accountId, \\\"AccountId does not match\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc7af7d788641fbd85afc9435ac1cb993a5011f88b14b1af87c6748bd65bdc326\",\"license\":\"MIT\"},\"contracts/ramps/wise/interfaces/IWiseAccountRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IWiseAccountRegistrationProcessor {\\n\\n    struct RegistrationData {\\n        string endpoint;\\n        string host;\\n        string profileId;\\n        string wiseTagHash;\\n        address userAddress;\\n    }\\n\\n    struct RegistrationProof {\\n        RegistrationData public_values;\\n        bytes proof;\\n    }\\n\\n    function processProof(\\n        RegistrationProof calldata _proof\\n    )\\n        external\\n    returns (bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x2a8373601ac246f684f1a92b111a245fe3c6d3d57d6abcb4e00bd8eeae734631\",\"license\":\"MIT\"},\"contracts/ramps/wise/interfaces/IWiseAccountRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IWiseAccountRegistry {\\n\\n    // Each Account is tied to a Wise ID and is represented by an Ethereum address.\\n    struct AccountInfo {\\n        bytes32 accountId;                  // User's Wise account ID\\n        bytes32 offRampId;                  // Multi-currency account ID to receive funds\\n        bytes32 wiseTagHash;                // Hash of user's wise tag account stored on register. Used to verify offramper's wise tag\\n    }\\n\\n    function getAccountInfo(address _account) external view returns (AccountInfo memory);\\n    function getAccountId(address _account) external view returns (bytes32);\\n\\n    function isRegisteredUser(address _account) external view returns (bool);\\n    \\n    function isAllowedUser(address _account, bytes32 _deniedUser) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfaf30dc7e7dd1a0bce25c0188059b17bde3929fb473570bc8860a82ae97c5b35\",\"license\":\"MIT\"},\"contracts/ramps/wise/interfaces/IWiseOffRamperRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IWiseOffRamperRegistrationProcessor {\\n\\n    struct OffRamperRegistrationData {\\n        string endpoint;\\n        string host;\\n        string profileId;\\n        string mcAccountId;\\n    }\\n\\n    struct OffRamperRegistrationProof {\\n        OffRamperRegistrationData public_values;\\n        bytes proof;\\n    }\\n\\n    function processProof(\\n        OffRamperRegistrationProof calldata _proof\\n    )\\n        external\\n    returns (bytes32, bytes32);\\n}\\n\",\"keccak256\":\"0x1ca016325effca3a3d66ffa59d5a6bb694f4daca8ba9d57542f1beea73f2ceec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a8238038062001a82833981016040819052620000349162000182565b6200003f3362000051565b6200004a81620000a1565b50620001b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000ab62000124565b6001600160a01b038116620001165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001218162000051565b50565b6000546001600160a01b03163314620001805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200010d565b565b6000602082840312156200019557600080fd5b81516001600160a01b0381168114620001ad57600080fd5b9392505050565b6118be80620001c46000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063c6a2aac81161007c578063c6a2aac814610356578063d88452451461035e578063e0b490f714610371578063e39ca3b414610392578063f2fde38b146103a5578063fbf15b1f146103b857600080fd5b8063715018a61461027e5780637b510fe8146102865780638da5cb5b1461030c5780639b357b5a1461031d578063b14fac2e14610330578063c3eb86811461034357600080fd5b80633056eb28116101155780633056eb28146101fe57806338e4bef614610211578063392e53cd146102245780634595bba014610238578063485cc95514610258578063605958f41461026b57600080fd5b80630876dda31461015d5780630f29d4c51461018d578063148172da146101a25780631acd84d8146101b55780631e48fe6b146101d85780631f5bdf5d146101eb575b600080fd5b600154610170906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a061019b366004611339565b6103cb565b005b6101a06101b036600461136e565b610524565b6101c86101c336600461139c565b610642565b6040519015158152602001610184565b6101a06101e63660046113de565b6106c8565b6101c86101f936600461149c565b610817565b6101a061020c36600461149c565b61082b565b6101c861021f36600461149c565b610888565b6002546101c890600160a01b900460ff1681565b61024b61024636600461149c565b6108b1565b60405161018491906114c0565b6101a0610266366004611504565b610927565b600254610170906001600160a01b031681565b6101a06109ba565b6102ea61029436600461149c565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394909416845260038252928290208251938401835280548452600181015491840191909152600201549082015290565b6040805182518152602080840151908201529181015190820152606001610184565b6000546001600160a01b0316610170565b6101a061032b36600461136e565b6109ce565b6101a061033e366004611339565b610acd565b6101a061035136600461149c565b610bb9565b6101a0610c0f565b6101a061036c3660046113de565b610cee565b61038461037f36600461149c565b610e49565b604051908152602001610184565b61024b6103a036600461149c565b610e64565b6101a06103b336600461149c565b610ed8565b6101c86103c636600461139c565b610f51565b6103d5818061153d565b6103e69060a081019060800161149c565b6001600160a01b0316336001600160a01b03161461045d5760405162461bcd60e51b815260206004820152602960248201527f43616c6c6572206d7573742062652061646472657373207370656369666965646044820152681034b710383937b7b360b91b60648201526084015b60405180910390fd5b33600090815260036020526040902054156104cc5760405162461bcd60e51b815260206004820152602960248201527f4163636f756e7420616c7265616479206173736f6369617465642077697468206044820152681858d8dbdd5b9d125960ba1b6064820152608401610454565b6000806104d883610f8c565b3360008181526003602052604080822085815560020184905551939550919350839285927fcc65223c6e9df339af3ea6f6f0bf09fa478060d7c745142bdccb626ef62c79e291a4505050565b61052d33610817565b6105495760405162461bcd60e51b81526004016104549061155d565b33600090815260036020908152604080832054808452600483528184208585526001019092529091205460ff16156105c35760405162461bcd60e51b815260206004820152601860248201527f5573657220616c7265616479206f6e2064656e796c69737400000000000000006044820152606401610454565b600081815260046020818152604080842086855260018181018452828620805460ff191682179055938352805493840181558452922001839055517f976c693d56f27ba17d902bda80c4fa0416b773fbf268bcb0ee71689234d769ee906106369083908590918252602082015260400190565b60405180910390a15050565b60008061064e84610e49565b600081815260046020908152604080832087845260010190915290205490915060ff16156106805760009150506106c2565b60008181526005602052604090205460ff1661069d5760016106be565b600081815260056020908152604080832086845260020190915290205460ff165b9150505b92915050565b6106d133610817565b6106ed5760405162461bcd60e51b81526004016104549061155d565b33600090815260036020526040812054905b825181101561081257600083828151811061071c5761071c611594565b6020908102919091018101516000858152600583526040808220838352600201909352919091205490915060ff1661078e5760405162461bcd60e51b8152602060048201526015602482015274155cd95c881b9bdd081bdb88185b1b1bdddb1a5cdd605a1b6044820152606401610454565b6000838152600560208181526040808420858552600281018352908420805460ff1916905592869052526107c5906001018261100d565b827fe87ba7050133e8b4c8b879f99b3276368eaca3b81f4ea415d9528843a15d8c63826040516107f791815260200190565b60405180910390a2508061080a816115c0565b9150506106ff565b505050565b60008061082383610e49565b141592915050565b610833611135565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd4e734c9a89ace3649766f5233487313285fe97ca577c2602beda889ef46dd3906020015b60405180910390a150565b60006005600061089784610e49565b815260208101919091526040016000205460ff1692915050565b6060600460006108c084610e49565b815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561091b57602002820191906000526020600020905b815481526020019060010190808311610907575b50505050509050919050565b61092f611135565b600254600160a01b900460ff161561097f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610454565b600180546001600160a01b039384166001600160a01b0319909116179055600280546001600160a81b0319169190921617600160a01b179055565b6109c2611135565b6109cc600061118f565b565b6109d733610817565b6109f35760405162461bcd60e51b81526004016104549061155d565b33600090815260036020908152604080832054808452600483528184208585526001019092529091205460ff16610a635760405162461bcd60e51b8152602060048201526014602482015273155cd95c881b9bdd081bdb8819195b9e5b1a5cdd60621b6044820152606401610454565b6000818152600460208181526040808420868552600181018352908420805460ff191690559284905252610a97908361100d565b60408051828152602081018490527f8935205b1b382095d2d95efbb36f81a11a34c548d45af26adc1a02d2f2bb546f9101610636565b610ad633610817565b610af25760405162461bcd60e51b81526004016104549061155d565b3360009081526003602052604090206001015415610b645760405162461bcd60e51b815260206004820152602960248201527f4163636f756e7420616c7265616479206173736f6369617465642077697468206044820152681bd99994985b5c125960ba1b6064820152608401610454565b600080610b70836111df565b3360008181526003602052604080822060010184905551939550919350839285927f1145ead7f8f95549bd8948731c7e50cda0ef6a0bba6867ee9e383633c2de4c2091a4505050565b610bc1611135565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f32bce9e8b6bd060cc566144f14693fad172bd139e984b38c7c83c6d29ef1ad489060200161087d565b610c1833610817565b610c345760405162461bcd60e51b81526004016104549061155d565b3360009081526003602090815260408083205480845260059092529091205460ff1615610ca35760405162461bcd60e51b815260206004820152601a60248201527f416c6c6f77206c69737420616c726561647920656e61626c65640000000000006044820152606401610454565b60008181526005602052604090819020805460ff19166001179055517f08df0a71ea3e5565a2138936ed06eaba47996a3ccfde2dae1f3edd1164e299d79061087d9083815260200190565b610cf733610817565b610d135760405162461bcd60e51b81526004016104549061155d565b33600090815260036020526040812054905b8251811015610812576000838281518110610d4257610d42611594565b6020908102919091018101516000858152600583526040808220838352600201909352919091205490915060ff1615610dbd5760405162461bcd60e51b815260206004820152601960248201527f5573657220616c7265616479206f6e20616c6c6f776c697374000000000000006044820152606401610454565b6000838152600560208181526040808420858552600281018352818520805460ff1916600190811790915593835283018054938401815584529220018290555183907f857ce673abc5a303fa8303102f12b42079aa85b97bca15b56428764dd1dec4d290610e2e9084815260200190565b60405180910390a25080610e41816115c0565b915050610d25565b6001600160a01b031660009081526003602052604090205490565b606060056000610e7384610e49565b815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561091b57602002820191906000526020600020908154815260200190600101908083116109075750505050509050919050565b610ee0611135565b6001600160a01b038116610f455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610454565b610f4e8161118f565b50565b600060046000610f6085610e49565b81526020808201929092526040908101600090812085825260010190925290205460ff16905092915050565b600154604051635e0b6e9b60e01b815260009182916001600160a01b0390911690635e0b6e9b90610fc1908690600401611648565b60408051808303816000875af1158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190611757565b9094909350915050565b6000806110698480548060200260200160405190810160405280929190818152602001828054801561105e57602002820191906000526020600020905b81548152602001906001019080831161104a575b5050505050846112be565b91509150806110b25760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606401610454565b83546000906110c39060019061177b565b9050808314611108578481815481106110de576110de611594565b90600052602060002001548584815481106110fb576110fb611594565b6000918252602090912001555b848054806111185761111861178e565b600190038181906000526020600020016000905590555050505050565b6000546001600160a01b031633146109cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610454565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460405163027c064960e51b815260009182916001600160a01b0390911690634f80c920906112149086906004016117a4565b60408051808303816000875af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190611757565b33600090815260036020526040902054919350915082146112b95760405162461bcd60e51b815260206004820152601860248201527f4163636f756e74496420646f6573206e6f74206d6174636800000000000000006044820152606401610454565b915091565b81516000908190815b8181101561130e57848682815181106112e2576112e2611594565b6020026020010151036112fc5792506001915061131a9050565b80611306816115c0565b9150506112c7565b50600019600092509250505b9250929050565b60006040828403121561133357600080fd5b50919050565b60006020828403121561134b57600080fd5b813567ffffffffffffffff81111561136257600080fd5b6106be84828501611321565b60006020828403121561138057600080fd5b5035919050565b6001600160a01b0381168114610f4e57600080fd5b600080604083850312156113af57600080fd5b82356113ba81611387565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156113f157600080fd5b823567ffffffffffffffff8082111561140957600080fd5b818501915085601f83011261141d57600080fd5b81358181111561142f5761142f6113c8565b8060051b604051601f19603f83011681018181108582111715611454576114546113c8565b60405291825284820192508381018501918883111561147257600080fd5b938501935b8285101561149057843584529385019392850192611477565b98975050505050505050565b6000602082840312156114ae57600080fd5b81356114b981611387565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156114f8578351835292840192918401916001016114dc565b50909695505050505050565b6000806040838503121561151757600080fd5b823561152281611387565b9150602083013561153281611387565b809150509250929050565b60008235609e1983360301811261155357600080fd5b9190910192915050565b6020808252601e908201527f43616c6c6572206d757374206265207265676973746572656420757365720000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115d2576115d26115aa565b5060010190565b6000808335601e198436030181126115f057600080fd5b830160208101925035905067ffffffffffffffff81111561161057600080fd5b80360382131561131a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260008235609e1984360301811261166257600080fd5b60406020840152830161167581806115d9565b60a0606086015261168b6101008601828461161f565b91505061169b60208301836115d9565b605f19808785030160808801526116b384838561161f565b93506116c260408601866115d9565b93509150808785030160a08801526116db84848461161f565b93506116ea60608601866115d9565b93509150808785030160c08801525061170483838361161f565b925050506080820135915061171882611387565b6001600160a01b03821660e085015261173460208601866115d9565b858303601f19016040870152925061174d82848361161f565b9695505050505050565b6000806040838503121561176a57600080fd5b505080516020909101519092909150565b818103818111156106c2576106c26115aa565b634e487b7160e01b600052603160045260246000fd5b6020815260008235607e198436030181126117be57600080fd5b6040602084015283016117d181806115d9565b608060608601526117e660e08601828461161f565b9150506117f660208301836115d9565b605f198087850301608088015261180e84838561161f565b935061181d60408601866115d9565b93509150808785030160a088015261183684848461161f565b935061184560608601866115d9565b95509250808785030160c0880152505061186082848361161f565b9250505061187160208501856115d9565b848303601f1901604086015261174d83828461161f56fea2646970667358221220f6834241fd8d555457b9123cd68085dfe9a82133219e6a045dd2e18fd5174ee464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063c6a2aac81161007c578063c6a2aac814610356578063d88452451461035e578063e0b490f714610371578063e39ca3b414610392578063f2fde38b146103a5578063fbf15b1f146103b857600080fd5b8063715018a61461027e5780637b510fe8146102865780638da5cb5b1461030c5780639b357b5a1461031d578063b14fac2e14610330578063c3eb86811461034357600080fd5b80633056eb28116101155780633056eb28146101fe57806338e4bef614610211578063392e53cd146102245780634595bba014610238578063485cc95514610258578063605958f41461026b57600080fd5b80630876dda31461015d5780630f29d4c51461018d578063148172da146101a25780631acd84d8146101b55780631e48fe6b146101d85780631f5bdf5d146101eb575b600080fd5b600154610170906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a061019b366004611339565b6103cb565b005b6101a06101b036600461136e565b610524565b6101c86101c336600461139c565b610642565b6040519015158152602001610184565b6101a06101e63660046113de565b6106c8565b6101c86101f936600461149c565b610817565b6101a061020c36600461149c565b61082b565b6101c861021f36600461149c565b610888565b6002546101c890600160a01b900460ff1681565b61024b61024636600461149c565b6108b1565b60405161018491906114c0565b6101a0610266366004611504565b610927565b600254610170906001600160a01b031681565b6101a06109ba565b6102ea61029436600461149c565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0394909416845260038252928290208251938401835280548452600181015491840191909152600201549082015290565b6040805182518152602080840151908201529181015190820152606001610184565b6000546001600160a01b0316610170565b6101a061032b36600461136e565b6109ce565b6101a061033e366004611339565b610acd565b6101a061035136600461149c565b610bb9565b6101a0610c0f565b6101a061036c3660046113de565b610cee565b61038461037f36600461149c565b610e49565b604051908152602001610184565b61024b6103a036600461149c565b610e64565b6101a06103b336600461149c565b610ed8565b6101c86103c636600461139c565b610f51565b6103d5818061153d565b6103e69060a081019060800161149c565b6001600160a01b0316336001600160a01b03161461045d5760405162461bcd60e51b815260206004820152602960248201527f43616c6c6572206d7573742062652061646472657373207370656369666965646044820152681034b710383937b7b360b91b60648201526084015b60405180910390fd5b33600090815260036020526040902054156104cc5760405162461bcd60e51b815260206004820152602960248201527f4163636f756e7420616c7265616479206173736f6369617465642077697468206044820152681858d8dbdd5b9d125960ba1b6064820152608401610454565b6000806104d883610f8c565b3360008181526003602052604080822085815560020184905551939550919350839285927fcc65223c6e9df339af3ea6f6f0bf09fa478060d7c745142bdccb626ef62c79e291a4505050565b61052d33610817565b6105495760405162461bcd60e51b81526004016104549061155d565b33600090815260036020908152604080832054808452600483528184208585526001019092529091205460ff16156105c35760405162461bcd60e51b815260206004820152601860248201527f5573657220616c7265616479206f6e2064656e796c69737400000000000000006044820152606401610454565b600081815260046020818152604080842086855260018181018452828620805460ff191682179055938352805493840181558452922001839055517f976c693d56f27ba17d902bda80c4fa0416b773fbf268bcb0ee71689234d769ee906106369083908590918252602082015260400190565b60405180910390a15050565b60008061064e84610e49565b600081815260046020908152604080832087845260010190915290205490915060ff16156106805760009150506106c2565b60008181526005602052604090205460ff1661069d5760016106be565b600081815260056020908152604080832086845260020190915290205460ff165b9150505b92915050565b6106d133610817565b6106ed5760405162461bcd60e51b81526004016104549061155d565b33600090815260036020526040812054905b825181101561081257600083828151811061071c5761071c611594565b6020908102919091018101516000858152600583526040808220838352600201909352919091205490915060ff1661078e5760405162461bcd60e51b8152602060048201526015602482015274155cd95c881b9bdd081bdb88185b1b1bdddb1a5cdd605a1b6044820152606401610454565b6000838152600560208181526040808420858552600281018352908420805460ff1916905592869052526107c5906001018261100d565b827fe87ba7050133e8b4c8b879f99b3276368eaca3b81f4ea415d9528843a15d8c63826040516107f791815260200190565b60405180910390a2508061080a816115c0565b9150506106ff565b505050565b60008061082383610e49565b141592915050565b610833611135565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527ffd4e734c9a89ace3649766f5233487313285fe97ca577c2602beda889ef46dd3906020015b60405180910390a150565b60006005600061089784610e49565b815260208101919091526040016000205460ff1692915050565b6060600460006108c084610e49565b815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561091b57602002820191906000526020600020905b815481526020019060010190808311610907575b50505050509050919050565b61092f611135565b600254600160a01b900460ff161561097f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610454565b600180546001600160a01b039384166001600160a01b0319909116179055600280546001600160a81b0319169190921617600160a01b179055565b6109c2611135565b6109cc600061118f565b565b6109d733610817565b6109f35760405162461bcd60e51b81526004016104549061155d565b33600090815260036020908152604080832054808452600483528184208585526001019092529091205460ff16610a635760405162461bcd60e51b8152602060048201526014602482015273155cd95c881b9bdd081bdb8819195b9e5b1a5cdd60621b6044820152606401610454565b6000818152600460208181526040808420868552600181018352908420805460ff191690559284905252610a97908361100d565b60408051828152602081018490527f8935205b1b382095d2d95efbb36f81a11a34c548d45af26adc1a02d2f2bb546f9101610636565b610ad633610817565b610af25760405162461bcd60e51b81526004016104549061155d565b3360009081526003602052604090206001015415610b645760405162461bcd60e51b815260206004820152602960248201527f4163636f756e7420616c7265616479206173736f6369617465642077697468206044820152681bd99994985b5c125960ba1b6064820152608401610454565b600080610b70836111df565b3360008181526003602052604080822060010184905551939550919350839285927f1145ead7f8f95549bd8948731c7e50cda0ef6a0bba6867ee9e383633c2de4c2091a4505050565b610bc1611135565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f32bce9e8b6bd060cc566144f14693fad172bd139e984b38c7c83c6d29ef1ad489060200161087d565b610c1833610817565b610c345760405162461bcd60e51b81526004016104549061155d565b3360009081526003602090815260408083205480845260059092529091205460ff1615610ca35760405162461bcd60e51b815260206004820152601a60248201527f416c6c6f77206c69737420616c726561647920656e61626c65640000000000006044820152606401610454565b60008181526005602052604090819020805460ff19166001179055517f08df0a71ea3e5565a2138936ed06eaba47996a3ccfde2dae1f3edd1164e299d79061087d9083815260200190565b610cf733610817565b610d135760405162461bcd60e51b81526004016104549061155d565b33600090815260036020526040812054905b8251811015610812576000838281518110610d4257610d42611594565b6020908102919091018101516000858152600583526040808220838352600201909352919091205490915060ff1615610dbd5760405162461bcd60e51b815260206004820152601960248201527f5573657220616c7265616479206f6e20616c6c6f776c697374000000000000006044820152606401610454565b6000838152600560208181526040808420858552600281018352818520805460ff1916600190811790915593835283018054938401815584529220018290555183907f857ce673abc5a303fa8303102f12b42079aa85b97bca15b56428764dd1dec4d290610e2e9084815260200190565b60405180910390a25080610e41816115c0565b915050610d25565b6001600160a01b031660009081526003602052604090205490565b606060056000610e7384610e49565b815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561091b57602002820191906000526020600020908154815260200190600101908083116109075750505050509050919050565b610ee0611135565b6001600160a01b038116610f455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610454565b610f4e8161118f565b50565b600060046000610f6085610e49565b81526020808201929092526040908101600090812085825260010190925290205460ff16905092915050565b600154604051635e0b6e9b60e01b815260009182916001600160a01b0390911690635e0b6e9b90610fc1908690600401611648565b60408051808303816000875af1158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190611757565b9094909350915050565b6000806110698480548060200260200160405190810160405280929190818152602001828054801561105e57602002820191906000526020600020905b81548152602001906001019080831161104a575b5050505050846112be565b91509150806110b25760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606401610454565b83546000906110c39060019061177b565b9050808314611108578481815481106110de576110de611594565b90600052602060002001548584815481106110fb576110fb611594565b6000918252602090912001555b848054806111185761111861178e565b600190038181906000526020600020016000905590555050505050565b6000546001600160a01b031633146109cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610454565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460405163027c064960e51b815260009182916001600160a01b0390911690634f80c920906112149086906004016117a4565b60408051808303816000875af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112569190611757565b33600090815260036020526040902054919350915082146112b95760405162461bcd60e51b815260206004820152601860248201527f4163636f756e74496420646f6573206e6f74206d6174636800000000000000006044820152606401610454565b915091565b81516000908190815b8181101561130e57848682815181106112e2576112e2611594565b6020026020010151036112fc5792506001915061131a9050565b80611306816115c0565b9150506112c7565b50600019600092509250505b9250929050565b60006040828403121561133357600080fd5b50919050565b60006020828403121561134b57600080fd5b813567ffffffffffffffff81111561136257600080fd5b6106be84828501611321565b60006020828403121561138057600080fd5b5035919050565b6001600160a01b0381168114610f4e57600080fd5b600080604083850312156113af57600080fd5b82356113ba81611387565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156113f157600080fd5b823567ffffffffffffffff8082111561140957600080fd5b818501915085601f83011261141d57600080fd5b81358181111561142f5761142f6113c8565b8060051b604051601f19603f83011681018181108582111715611454576114546113c8565b60405291825284820192508381018501918883111561147257600080fd5b938501935b8285101561149057843584529385019392850192611477565b98975050505050505050565b6000602082840312156114ae57600080fd5b81356114b981611387565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156114f8578351835292840192918401916001016114dc565b50909695505050505050565b6000806040838503121561151757600080fd5b823561152281611387565b9150602083013561153281611387565b809150509250929050565b60008235609e1983360301811261155357600080fd5b9190910192915050565b6020808252601e908201527f43616c6c6572206d757374206265207265676973746572656420757365720000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115d2576115d26115aa565b5060010190565b6000808335601e198436030181126115f057600080fd5b830160208101925035905067ffffffffffffffff81111561161057600080fd5b80360382131561131a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260008235609e1984360301811261166257600080fd5b60406020840152830161167581806115d9565b60a0606086015261168b6101008601828461161f565b91505061169b60208301836115d9565b605f19808785030160808801526116b384838561161f565b93506116c260408601866115d9565b93509150808785030160a08801526116db84848461161f565b93506116ea60608601866115d9565b93509150808785030160c08801525061170483838361161f565b925050506080820135915061171882611387565b6001600160a01b03821660e085015261173460208601866115d9565b858303601f19016040870152925061174d82848361161f565b9695505050505050565b6000806040838503121561176a57600080fd5b505080516020909101519092909150565b818103818111156106c2576106c26115aa565b634e487b7160e01b600052603160045260246000fd5b6020815260008235607e198436030181126117be57600080fd5b6040602084015283016117d181806115d9565b608060608601526117e660e08601828461161f565b9150506117f660208301836115d9565b605f198087850301608088015261180e84838561161f565b935061181d60408601866115d9565b93509150808785030160a088015261183684848461161f565b935061184560608601866115d9565b95509250808785030160c0880152505061186082848361161f565b9250505061187160208501856115d9565b848303601f1901604086015261174d83828461161f56fea2646970667358221220f6834241fd8d555457b9123cd68085dfe9a82133219e6a045dd2e18fd5174ee464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAccountToDenylist(bytes32)": {
        "params": {
          "_deniedUser": "accountId being banned"
        }
      },
      "addAccountsToAllowlist(bytes32[])": {
        "params": {
          "_allowedUsers": "List of accountIds allowed to signal intents on the user's deposit"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_accountRegistrationProcessor": "Account Registration processor address",
          "_offRamperRegistrationProcessor": "Off-ramper Registration processor address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(((string,string,string,string,address),bytes))": {
        "params": {
          "_proof": "Registration proof consisting of unredacted data being notarized and a signature"
        }
      },
      "registerAsOffRamper(((string,string,string,string),bytes))": {
        "params": {
          "_proof": "Registration proof consisting of unredacted data being notarized and a signature"
        }
      },
      "removeAccountFromDenylist(bytes32)": {
        "params": {
          "_approvedUser": "accountId being approved"
        }
      },
      "removeAccountsFromAllowlist(bytes32[])": {
        "params": {
          "_disallowedUsers": "List of accountIds being approved"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAccountRegistrationProcessor(address)": {
        "params": {
          "_registrationProcessor": "New registration proccesor address"
        }
      },
      "setOffRamperRegistrationProcessor(address)": {
        "params": {
          "_registrationProcessor": "New registration proccesor address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAccountToDenylist(bytes32)": {
        "notice": "Adds an accountId to a depositor's deny list. If an address associated with the banned accountId attempts to signal an intent on the user's deposit they will be denied."
      },
      "addAccountsToAllowlist(bytes32[])": {
        "notice": "Adds passed accountIds to a depositor's allow list. All addresses associated with the allowed accountIds will be able to signal intents on the user's deposit."
      },
      "enableAllowlist()": {
        "notice": "Enables allow list for user, only users on the allow list will be able to signal intents on the user's deposit."
      },
      "initialize(address,address)": {
        "notice": "Initialize Ramp with the addresses of the Processors"
      },
      "register(((string,string,string,string,address),bytes))": {
        "notice": "Registers a new account by pulling the profileId from the proof and assigning the account owner to the sender of the transaction."
      },
      "registerAsOffRamper(((string,string,string,string),bytes))": {
        "notice": "Registers an account for off-ramping by pulling the multi-currency account id from the proof and assigning the account owner to the sender of the transaction."
      },
      "removeAccountFromDenylist(bytes32)": {
        "notice": "Removes an accountId from a depositor's deny list."
      },
      "removeAccountsFromAllowlist(bytes32[])": {
        "notice": "Removes an passed accountId's from allow list. If allow list is enabled only users on the allow list will be able to signal intents on the user's deposit."
      },
      "setAccountRegistrationProcessor(address)": {
        "notice": "GOVERNANCE ONLY: Updates the account registration processor address used for validating and interpreting tls proofs."
      },
      "setOffRamperRegistrationProcessor(address)": {
        "notice": "GOVERNANCE ONLY: Updates the off ramper registration processor address used for validating and interpreting tls proofs."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3339,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "accountRegistrationProcessor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IWiseAccountRegistrationProcessor)6323"
      },
      {
        "astId": 3342,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "offRamperRegistrationProcessor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWiseOffRamperRegistrationProcessor)6392"
      },
      {
        "astId": 3344,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "isInitialized",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3349,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "accounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(AccountInfo)6332_storage)"
      },
      {
        "astId": 3354,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "denyList",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(DenyList)3314_storage)"
      },
      {
        "astId": 3359,
        "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
        "label": "allowList",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(AllowList)3324_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IWiseAccountRegistrationProcessor)6323": {
        "encoding": "inplace",
        "label": "contract IWiseAccountRegistrationProcessor",
        "numberOfBytes": "20"
      },
      "t_contract(IWiseOffRamperRegistrationProcessor)6392": {
        "encoding": "inplace",
        "label": "contract IWiseOffRamperRegistrationProcessor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AccountInfo)6332_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IWiseAccountRegistry.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)6332_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AllowList)3324_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct WiseAccountRegistry.AllowList)",
        "numberOfBytes": "32",
        "value": "t_struct(AllowList)3324_storage"
      },
      "t_mapping(t_bytes32,t_struct(DenyList)3314_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct WiseAccountRegistry.DenyList)",
        "numberOfBytes": "32",
        "value": "t_struct(DenyList)3314_storage"
      },
      "t_struct(AccountInfo)6332_storage": {
        "encoding": "inplace",
        "label": "struct IWiseAccountRegistry.AccountInfo",
        "members": [
          {
            "astId": 6327,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "accountId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6329,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "offRampId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6331,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "wiseTagHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AllowList)3324_storage": {
        "encoding": "inplace",
        "label": "struct WiseAccountRegistry.AllowList",
        "members": [
          {
            "astId": 3316,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "isEnabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3319,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "allowedUsers",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3323,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "isAllowed",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DenyList)3314_storage": {
        "encoding": "inplace",
        "label": "struct WiseAccountRegistry.DenyList",
        "members": [
          {
            "astId": 3309,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "deniedUsers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3313,
            "contract": "contracts/ramps/wise/WiseAccountRegistry.sol:WiseAccountRegistry",
            "label": "isDenied",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}