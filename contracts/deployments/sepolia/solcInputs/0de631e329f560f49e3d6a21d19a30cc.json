{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/external/Bytes32ArrayUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title Bytes32ArrayUtils\n * @author ZKP2P\n *\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\n */\nlibrary Bytes32ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            bytes32 current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(bytes32[] memory A, bytes32 a)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            (bytes32[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(bytes32[] storage A, bytes32 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(bytes32[] memory A, uint256 index)\n        internal\n        pure\n        returns (bytes32[] memory, bytes32)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        bytes32[] memory newBytes = new bytes32[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newBytes[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newBytes[j - 1] = A[j];\n        }\n        return (newBytes, A[index]);\n    }\n}\n"
    },
    "contracts/external/Uint256ArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title Uint256ArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Uint256 Arrays\n */\nlibrary Uint256ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        uint256[] memory newUints = new uint256[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newUints[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newUints[aLength + j] = B[j];\n        }\n        return newUints;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(uint256[] storage A, uint256 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"uint256 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}\n"
    },
    "contracts/lib/StringConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\n// converting from string to Uint\nlibrary StringConversionUtils {\n    \n    /**\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\n     * the returned number has multiple floating points then the function will revert.\n     *\n     * Examples: _s = \"12.34\", _expectedDecimals = 6 => 12340000\n     *           _s = \"12.34\", _expectedDecimals = 2 => 1234\n     *           _s = \"12.34\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\n     *           _s = \"12.34.56\", _expectedDecimals = 6 => REVERT (Invalid number)\n     *\n     * @param _s                    String being processed\n     * @param _desiredDecimals      Desired amount of decimal places\n     */\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\n        return stringToUint(_s, 0x2E, _desiredDecimals);\n    }\n\n    function stringToUint(\n        string memory _s,\n        bytes1 _decimalCharacter,\n        uint256 _desiredDecimals\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        bytes memory b = bytes(_s);\n\n        uint256 result = 0;\n        uint256 decimalPlaces = 0;\n\n        bool decimals = false;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            if (decimals) {\n                decimalPlaces++;\n            }\n\n            if (b[i] == _decimalCharacter) {\n                require(decimals == false, \"String has multiple decimals\");\n                decimals = true;\n            }\n        }\n\n        require(decimalPlaces <= _desiredDecimals, \"String has too many decimal places\");\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\n    }\n\n    /**\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\n     *\n     * @param _str           String being processed\n     * @param _startIndex    Index to start parsing from\n     * @param _endIndex      Index to stop parsing at (index not included in result)\n     */\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\n        bytes memory strBytes = bytes(_str);\n        bytes memory result = new bytes(_endIndex-_startIndex);\n        for(uint i = _startIndex; i < _endIndex; i++) {\n            result[i-_startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function replaceString(\n        string memory _str,\n        string memory _lookupValue,\n        string memory _replaceValue\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory strBytes = bytes(_str);\n        bytes memory lookupBytes = bytes(_lookupValue);\n\n        uint256 lookupIndex = indexOf(_str, _lookupValue);\n        if (lookupIndex == type(uint256).max) {\n            return _str;\n        }\n\n        // Split the original string into two parts: before and after the keyword\n        string memory beforeKeyword = substring(_str, 0, lookupIndex);\n        string memory afterKeyword = substring(_str, lookupIndex + lookupBytes.length, strBytes.length);\n        \n        return string.concat(beforeKeyword, _replaceValue, afterKeyword);\n    }\n\n    function indexOf(string memory str, string memory substr) internal pure returns (uint) {\n        bytes memory strBytes = bytes(str);\n        bytes memory substrBytes = bytes(substr);\n        \n        if (strBytes.length < substrBytes.length) return type(uint256).max;\n        \n        for (uint i = 0; i <= strBytes.length - substrBytes.length; i++) {\n            bool found = true;\n            for (uint j = 0; j < substrBytes.length; j++) {\n                if (strBytes[i + j] != substrBytes[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return i;\n        }\n        \n        return type(uint256).max;\n    }\n\n    function stringComparison(string memory _a, string memory _b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b)));\n    }\n}\n"
    },
    "contracts/processors/keyHashAdapters/IKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IKeyHashAdapterV2 {\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\n}\n"
    },
    "contracts/processors/nullifierRegistries/INullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface INullifierRegistry {\n    function addNullifier(bytes32 _nullifier) external;\n    function isNullified(bytes32 _nullifier) external view returns(bool);\n}\n"
    },
    "contracts/processors/TLSBaseProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { SignatureChecker } from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract TLSBaseProcessor is Ownable {\n\n    using SignatureChecker for address;\n    using ECDSA for bytes32;\n\n    /* ============ Modifiers ============ */\n    modifier onlyRamp() {\n        require(msg.sender == ramp, \"Only Ramp can call this function\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    address public immutable ramp;\n    string public endpoint;\n    string public host;\n\n    INullifierRegistry public nullifierRegistry;\n    uint256 public timestampBuffer;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        string memory _endpoint,\n        string memory _host\n    )\n        Ownable()\n    {\n        ramp = _ramp;\n        endpoint = _endpoint;\n        host = _host;\n\n        nullifierRegistry = _nullifierRegistry;\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice ONLY OWNER: Sets the timestamp buffer for validated TLS calls. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2\n     * timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for validated TLS calls\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateTLSEndpoint(\n        string memory _expectedEndpoint,\n        string memory _passedEndpoint\n    )\n        internal\n        pure\n    {\n        require(\n            keccak256(abi.encode(_expectedEndpoint)) == keccak256(abi.encode(_passedEndpoint)),\n            \"Endpoint does not match expected\"\n        );\n    }\n\n    function _validateTLSHost(\n        string memory _expectedHost,\n        string memory _passedHost\n    )\n        internal\n        pure\n    {\n        require(\n            keccak256(abi.encode(_expectedHost)) == keccak256(abi.encode(_passedHost)),\n            \"Host does not match expected\"\n        );\n    }\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n\n    function _isValidVerifierSignature(\n        bytes memory _message,\n        bytes memory _signature,\n        address _verifier\n    )\n        internal\n        view\n        returns(bool)\n    {\n        bytes32 verifierPayload = keccak256(_message).toEthSignedMessageHash();\n\n        return _verifier.isValidSignatureNow(verifierPayload, _signature);\n    }\n}\n"
    },
    "contracts/ramps/wise/interfaces/IWiseAccountRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IWiseAccountRegistrationProcessor {\n\n    struct RegistrationData {\n        string endpoint;\n        string host;\n        string profileId;\n        string wiseTagHash;\n        address userAddress;\n    }\n\n    struct RegistrationProof {\n        RegistrationData public_values;\n        bytes proof;\n    }\n\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        external\n    returns (bytes32, bytes32);\n}\n"
    },
    "contracts/ramps/wise/interfaces/IWiseAccountRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IWiseAccountRegistry {\n\n    // Each Account is tied to a Wise ID and is represented by an Ethereum address.\n    struct AccountInfo {\n        bytes32 accountId;                  // User's Wise account ID\n        bytes32 offRampId;                  // Multi-currency account ID to receive funds\n        bytes32 wiseTagHash;                // Hash of user's wise tag account stored on register. Used to verify offramper's wise tag\n    }\n\n    function getAccountInfo(address _account) external view returns (AccountInfo memory);\n    function getAccountId(address _account) external view returns (bytes32);\n\n    function isRegisteredUser(address _account) external view returns (bool);\n    \n    function isAllowedUser(address _account, bytes32 _deniedUser) external view returns (bool);\n}\n"
    },
    "contracts/ramps/wise/interfaces/IWiseOffRamperRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IWiseOffRamperRegistrationProcessor {\n\n    struct OffRamperRegistrationData {\n        string endpoint;\n        string host;\n        string profileId;\n        string mcAccountId;\n    }\n\n    struct OffRamperRegistrationProof {\n        OffRamperRegistrationData public_values;\n        bytes proof;\n    }\n\n    function processProof(\n        OffRamperRegistrationProof calldata _proof\n    )\n        external\n    returns (bytes32, bytes32);\n}\n"
    },
    "contracts/ramps/wise/interfaces/IWiseSendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IWiseSendProcessor {\n\n    struct SendData {\n        string endpoint;\n        string host;\n        string transferId;\n        string senderId;\n        string recipientId;\n        string amount;\n        string currencyId;\n        string status;\n        string timestamp;\n        uint256 intentHash;\n    }\n\n    struct SendProof {\n        SendData public_values;\n        bytes proof;\n    }\n\n    function processProof(\n        SendProof calldata _proof,\n        address _verifierSigningKey\n    )\n        external\n    returns(uint256, uint256, bytes32, bytes32);\n}\n"
    },
    "contracts/ramps/wise/mocks/WiseAccountRegistrationProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IWiseAccountRegistrationProcessor } from \"../interfaces/IWiseAccountRegistrationProcessor.sol\";\nimport { StringConversionUtils } from \"../../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseAccountRegistrationProcessorMock is IWiseAccountRegistrationProcessor {\n\n    using StringConversionUtils for string;\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n        RegistrationProof calldata _proof\n    )\n        public\n        pure\n        override\n        returns(bytes32 onRampId, bytes32 wiseTagHash)\n    {\n        return(\n            bytes32(_proof.public_values.profileId.stringToUint(0)),\n            bytes32(_proof.public_values.wiseTagHash.stringToUint(0))\n        );\n    }\n}\n"
    },
    "contracts/ramps/wise/mocks/WiseOffRamperRegistrationProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IWiseOffRamperRegistrationProcessor } from \"../interfaces/IWiseOffRamperRegistrationProcessor.sol\";\nimport { StringConversionUtils } from \"../../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseOffRamperRegistrationProcessorMock is IWiseOffRamperRegistrationProcessor {\n\n    using StringConversionUtils for string;\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n       OffRamperRegistrationProof calldata _proof\n    )\n        public\n        pure\n        override\n        returns(bytes32 onRampId, bytes32 wiseTagHash)\n    {\n        return(\n            bytes32(_proof.public_values.profileId.stringToUint(0)),\n            bytes32(_proof.public_values.mcAccountId.stringToUint(0))\n        );\n    }\n}\n"
    },
    "contracts/ramps/wise/mocks/WiseSendProcessorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IWiseSendProcessor } from \"../interfaces/IWiseSendProcessor.sol\";\nimport { StringConversionUtils } from \"../../../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseSendProcessorMock is IWiseSendProcessor {\n\n    using StringConversionUtils for string;\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External View Functions ============ */\n    function processProof(\n        SendProof calldata _proof,\n        address /*_verifierSigningKey*/\n    )\n        public\n        pure\n        override\n        returns(\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperIdHash,\n            bytes32 currencyId\n        )\n    {\n        return(\n            _proof.public_values.amount.stringToUint(6),\n            _proof.public_values.timestamp.stringToUint(0),\n            bytes32(_proof.public_values.recipientId.stringToUint(0)),\n            keccak256(abi.encodePacked(_proof.public_values.currencyId))\n        );\n    }\n}\n"
    },
    "contracts/ramps/wise/WiseAccountRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { SignatureChecker } from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IWiseAccountRegistrationProcessor } from \"./interfaces/IWiseAccountRegistrationProcessor.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\nimport { TLSBaseProcessor } from \"../../processors/TLSBaseProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseAccountRegistrationProcessor is IWiseAccountRegistrationProcessor, TLSBaseProcessor {\n\n    using ECDSA for bytes32;\n    using SignatureChecker for address;\n    using StringConversionUtils for string;\n    \n    /* ============ Events ============ */\n    event VerifierSigningKeySet(address _verifierSigningKey);\n    \n    /* ============ Public Variables ============ */\n    address public verifierSigningKey;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        address _verifierSigningKey,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        string memory _endpoint,\n        string memory _host\n    )\n        TLSBaseProcessor(\n            _ramp,\n            _nullifierRegistry,\n            _timestampBuffer,\n            _endpoint,\n            _host\n        )\n    {\n        verifierSigningKey = _verifierSigningKey;\n    }\n\n    /* ============ External Functions ============ */\n\n    function processProof(\n        IWiseAccountRegistrationProcessor.RegistrationProof calldata _proof\n    )\n        public\n        override\n        onlyRamp\n        returns(bytes32 onRampId, bytes32 wiseTagHash)\n    {\n        _validateProof(_proof.public_values, _proof.proof);\n\n        _validateTLSEndpoint(endpoint, _proof.public_values.endpoint);\n        _validateTLSHost(host, _proof.public_values.host);\n\n        _validateAndAddNullifier(keccak256(abi.encode(_proof.public_values.userAddress, _proof.public_values.profileId)));\n\n        onRampId = bytes32(_proof.public_values.profileId.stringToUint(0));\n        wiseTagHash = bytes32(_proof.public_values.wiseTagHash.stringToUint(0));\n    }\n\n    /* ============ External Admin Functions ============ */\n\n    function setVerifierSigningKey(address _verifierSigningKey) external onlyOwner {\n        verifierSigningKey = _verifierSigningKey;\n\n        emit VerifierSigningKeySet(_verifierSigningKey);\n    }\n\n    /* ============ View Functions ============ */\n\n    function verifyProof(\n        IWiseAccountRegistrationProcessor.RegistrationData memory _publicValues,\n        bytes memory _proof\n    )\n        public\n        view\n        returns(bool)\n    {\n        bytes memory encodedMessage = abi.encode(\n            _publicValues.endpoint,\n            _publicValues.host,\n            _publicValues.profileId,\n            _publicValues.wiseTagHash,\n            _publicValues.userAddress\n        );\n        return _isValidVerifierSignature(encodedMessage, _proof, verifierSigningKey);\n    }\n    \n    /* ============ Internal Functions ============ */\n\n    function _validateProof(\n        IWiseAccountRegistrationProcessor.RegistrationData memory _publicValues, \n        bytes memory _proof\n    )\n        internal\n        view\n    {   \n        require(\n            verifyProof(_publicValues, _proof),\n            \"Invalid signature from verifier\"\n        );\n    }\n}\n"
    },
    "contracts/ramps/wise/WiseAccountRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"../../external/Uint256ArrayUtils.sol\";\n\nimport { IWiseAccountRegistrationProcessor } from \"./interfaces/IWiseAccountRegistrationProcessor.sol\";\nimport { IWiseAccountRegistry } from \"./interfaces/IWiseAccountRegistry.sol\";\nimport { IWiseOffRamperRegistrationProcessor } from \"./interfaces/IWiseOffRamperRegistrationProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseAccountRegistry is IWiseAccountRegistry, Ownable {\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    event AccountRegistered(address indexed accountOwner, bytes32 indexed accountId, bytes32 indexed wiseTagHash);\n    event OffRamperRegistered(address indexed accountOwner, bytes32 indexed accountId, bytes32 indexed offRampId);\n\n    event UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\n    event UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\n\n    event AllowlistEnabled(bytes32 listOwner);\n    event UserAddedToAllowlist(bytes32 indexed listOwner, bytes32 allowedUser);\n    event UserRemovedFromAllowlist(bytes32 indexed listOwner, bytes32 allowedUser);\n\n    event NewAccountRegistrationProcessorSet(address registrationProcessor);\n    event NewOffRamperRegistrationProcessorSet(address registrationProcessor);\n\n    /* ============ Structs ============ */\n\n    struct DenyList {\n        bytes32[] deniedUsers;              // Array of accountIds that are denied from taking depositors liquidity\n        mapping(bytes32 => bool) isDenied;  // Mapping of accountId to boolean indicating if the user is denied\n    }\n\n    struct AllowList {\n        bool isEnabled;                     // Boolean indicating if the allowlist is enabled\n        bytes32[] allowedUsers;             // Array of accountIds that are allowed from taking depositors liquidity\n        mapping(bytes32 => bool) isAllowed; // Mapping of accountId to boolean indicating if the user is allowed\n    }\n\n    /* ============ Modifiers ============ */\n    modifier onlyRegisteredUser() {\n        require(isRegisteredUser(msg.sender), \"Caller must be registered user\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    IWiseAccountRegistrationProcessor public accountRegistrationProcessor;      // Address of Account registration processor contract\n    IWiseOffRamperRegistrationProcessor public offRamperRegistrationProcessor;  // Address of Off-ramper registration processor contract\n\n    bool public isInitialized;                                                  // Indicates if contract has been initialized\n\n    mapping(address => AccountInfo) internal accounts;                          // Mapping of Ethereum accounts to their account information (IDs and deposits)\n    mapping(bytes32 => DenyList) internal denyList;                             // Mapping of accountId to denylist\n    mapping(bytes32 => AllowList) internal allowList;                           // Mapping of accountId to allow list\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner\n    )\n        Ownable()\n    {\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Initialize Ramp with the addresses of the Processors\n     *\n     * @param _accountRegistrationProcessor     Account Registration processor address\n     * @param _offRamperRegistrationProcessor   Off-ramper Registration processor address\n     */\n    function initialize(\n        IWiseAccountRegistrationProcessor _accountRegistrationProcessor,\n        IWiseOffRamperRegistrationProcessor _offRamperRegistrationProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        accountRegistrationProcessor = _accountRegistrationProcessor;\n        offRamperRegistrationProcessor = _offRamperRegistrationProcessor;\n\n        isInitialized = true;\n    }\n\n    /**\n     * @notice Registers a new account by pulling the profileId from the proof and assigning the account owner to the\n     * sender of the transaction.\n     *\n     * @param _proof    Registration proof consisting of unredacted data being notarized and a signature\n     */\n    function register(\n        IWiseAccountRegistrationProcessor.RegistrationProof calldata _proof\n    )\n        external\n    {\n        require(msg.sender == _proof.public_values.userAddress, \"Caller must be address specified in proof\");\n        require(accounts[msg.sender].accountId == bytes32(0), \"Account already associated with accountId\");\n        (\n            bytes32 accountId,\n            bytes32 wiseTagHash\n        ) = _verifyRegistrationProof(_proof);\n\n        accounts[msg.sender].accountId = accountId;\n        accounts[msg.sender].wiseTagHash = wiseTagHash;\n\n        emit AccountRegistered(msg.sender, accountId, wiseTagHash);\n    }\n\n    /**\n     * @notice Registers an account for off-ramping by pulling the multi-currency account id from the proof and assigning\n     * the account owner to the sender of the transaction.\n     *\n     * @param _proof    Registration proof consisting of unredacted data being notarized and a signature\n     */\n    function registerAsOffRamper(\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof calldata _proof\n    )\n        external\n        onlyRegisteredUser\n    {\n        require(accounts[msg.sender].offRampId == bytes32(0), \"Account already associated with offRampId\");\n        (\n            bytes32 accountId,\n            bytes32 offRampId\n        ) = _verifyOffRamperRegistrationProof(_proof);\n\n        accounts[msg.sender].offRampId = offRampId;\n\n        emit OffRamperRegistered(msg.sender, accountId, offRampId);\n    }\n\n    /**\n     * @notice Adds an accountId to a depositor's deny list. If an address associated with the banned accountId attempts to\n     * signal an intent on the user's deposit they will be denied.\n     *\n     * @param _deniedUser   accountId being banned\n     */\n    function addAccountToDenylist(bytes32 _deniedUser) external onlyRegisteredUser {\n        bytes32 denyingUser = accounts[msg.sender].accountId;\n\n        require(!denyList[denyingUser].isDenied[_deniedUser], \"User already on denylist\");\n\n        denyList[denyingUser].isDenied[_deniedUser] = true;\n        denyList[denyingUser].deniedUsers.push(_deniedUser);\n\n        emit UserAddedToDenylist(denyingUser, _deniedUser);\n    }\n\n    /**\n     * @notice Removes an accountId from a depositor's deny list.\n     *\n     * @param _approvedUser   accountId being approved\n     */\n    function removeAccountFromDenylist(bytes32 _approvedUser) external onlyRegisteredUser {\n        bytes32 approvingUser = accounts[msg.sender].accountId;\n\n        require(denyList[approvingUser].isDenied[_approvedUser], \"User not on denylist\");\n\n        denyList[approvingUser].isDenied[_approvedUser] = false;\n        denyList[approvingUser].deniedUsers.removeStorage(_approvedUser);\n\n        emit UserRemovedFromDenylist(approvingUser, _approvedUser);\n    }\n\n    /**\n     * @notice Enables allow list for user, only users on the allow list will be able to signal intents on the user's deposit.\n     */\n    function enableAllowlist() external onlyRegisteredUser {\n        bytes32 allowingUser = accounts[msg.sender].accountId;\n\n        require(!allowList[allowingUser].isEnabled, \"Allow list already enabled\");\n\n        allowList[allowingUser].isEnabled = true;\n\n        emit AllowlistEnabled(allowingUser);\n    }\n\n    /**\n     * @notice Adds passed accountIds to a depositor's allow list. All addresses associated with the allowed accountIds will\n     * be able to signal intents on the user's deposit.\n     *\n     * @param _allowedUsers   List of accountIds allowed to signal intents on the user's deposit\n     */\n    function addAccountsToAllowlist(bytes32[] memory _allowedUsers) external onlyRegisteredUser {\n        bytes32 allowingUser = accounts[msg.sender].accountId;\n\n        for(uint256 i = 0; i < _allowedUsers.length; i++) {\n            bytes32 allowedUser = _allowedUsers[i];\n\n            require(!allowList[allowingUser].isAllowed[allowedUser], \"User already on allowlist\");\n\n            allowList[allowingUser].isAllowed[allowedUser] = true;\n            allowList[allowingUser].allowedUsers.push(allowedUser);\n\n            emit UserAddedToAllowlist(allowingUser, allowedUser);\n        }\n    }\n\n    /**\n     * @notice Removes an passed accountId's from allow list. If allow list is enabled only users on the allow list will be\n     * able to signal intents on the user's deposit.\n     *\n     * @param _disallowedUsers   List of accountIds being approved\n     */\n    function removeAccountsFromAllowlist(bytes32[] memory _disallowedUsers) external onlyRegisteredUser {\n        bytes32 disallowingUser = accounts[msg.sender].accountId;\n\n        for(uint256 i = 0; i < _disallowedUsers.length; i++) {\n            bytes32 disallowedUser = _disallowedUsers[i];\n\n            require(allowList[disallowingUser].isAllowed[disallowedUser], \"User not on allowlist\");\n\n            allowList[disallowingUser].isAllowed[disallowedUser] = false;\n            allowList[disallowingUser].allowedUsers.removeStorage(disallowedUser);\n\n            emit UserRemovedFromAllowlist(disallowingUser, disallowedUser);\n        }\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the account registration processor address used for validating and interpreting tls proofs.\n     *\n     * @param _registrationProcessor   New registration proccesor address\n     */\n    function setAccountRegistrationProcessor(IWiseAccountRegistrationProcessor _registrationProcessor) external onlyOwner {\n        accountRegistrationProcessor = _registrationProcessor;\n        emit NewAccountRegistrationProcessorSet(address(_registrationProcessor));\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the off ramper registration processor address used for validating and interpreting tls proofs.\n     *\n     * @param _registrationProcessor   New registration proccesor address\n     */\n    function setOffRamperRegistrationProcessor(IWiseOffRamperRegistrationProcessor _registrationProcessor) external onlyOwner {\n        offRamperRegistrationProcessor = _registrationProcessor;\n        emit NewOffRamperRegistrationProcessorSet(address(_registrationProcessor));\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\n        return accounts[_account];\n    }\n\n    function getAccountId(address _account) public view returns (bytes32) {\n        return accounts[_account].accountId;\n    }\n\n    function isRegisteredUser(address _account) public view returns (bool) {\n        return getAccountId(_account) != bytes32(0);\n    }\n\n    function getDeniedUsers(address _account) external view returns (bytes32[] memory) {\n        return denyList[getAccountId(_account)].deniedUsers;\n    }\n\n    function isDeniedUser(address _account, bytes32 _deniedUser) external view returns (bool) {\n        return denyList[getAccountId(_account)].isDenied[_deniedUser];\n    }\n\n    function isAllowlistEnabled(address _account) external view returns (bool) {\n        return allowList[getAccountId(_account)].isEnabled;\n    }\n\n    function getAllowedUsers(address _account) external view returns (bytes32[] memory) {\n        return allowList[getAccountId(_account)].allowedUsers;\n    }\n\n    function isAllowedUser(address _account, bytes32 _allowedUser) external view returns (bool) {\n        bytes32 allowingUser = getAccountId(_account);\n\n        // Deny list overrides, if user on deny list then they are not allowed\n        if(denyList[allowingUser].isDenied[_allowedUser]) { return false; }\n\n        // Check if allow list is enabled, if so return status of user, else return true\n        return allowList[allowingUser].isEnabled ? allowList[allowingUser].isAllowed[_allowedUser] : true;\n    }\n    \n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Validate the user has an Wise account, we do not nullify this email since it can be reused to register under\n     * different addresses.\n     */\n    function _verifyRegistrationProof(\n        IWiseAccountRegistrationProcessor.RegistrationProof calldata _proof\n    )\n        internal\n        returns(bytes32 accountId, bytes32 wiseTagHash)\n    {\n        (\n            accountId,\n            wiseTagHash\n        ) = accountRegistrationProcessor.processProof(_proof);\n    }\n\n    /**\n     * @notice Validate the user has an Wise account, we do not nullify this email since it can be reused to register under\n     * different addresses.\n     */\n    function _verifyOffRamperRegistrationProof(\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof calldata _proof\n    )\n        internal\n        returns(bytes32 accountId, bytes32 offRampId)\n    {\n        (\n            accountId,\n            offRampId\n        ) = offRamperRegistrationProcessor.processProof(_proof);\n\n        require(accountId == accounts[msg.sender].accountId, \"AccountId does not match\");\n    }\n}\n"
    },
    "contracts/ramps/wise/WiseOffRamperRegistrationProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IWiseOffRamperRegistrationProcessor } from \"./interfaces/IWiseOffRamperRegistrationProcessor.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\nimport { TLSBaseProcessor } from \"../../processors/TLSBaseProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseOffRamperRegistrationProcessor is IWiseOffRamperRegistrationProcessor, TLSBaseProcessor {\n\n    using StringConversionUtils for string;\n    \n    /* ============ Events ============ */\n    event VerifierSigningKeySet(address _verifierSigningKey);\n    \n    /* ============ Public Variables ============ */\n    address public verifierSigningKey;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        address _verifierSigningKey,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        string memory _endpoint,\n        string memory _host\n    )\n        TLSBaseProcessor(\n            _ramp,\n            _nullifierRegistry,\n            _timestampBuffer,\n            _endpoint,\n            _host\n        )\n    {\n        verifierSigningKey = _verifierSigningKey;\n    }\n\n    /* ============ External Functions ============ */\n\n    function processProof(\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationProof calldata _proof\n    )\n        public\n        view\n        override\n        onlyRamp\n        returns(bytes32 onRampId, bytes32 offRampId)\n    {\n        _validateProof(_proof.public_values, _proof.proof);\n\n        _validateTLSEndpoint(endpoint.replaceString(\"*\", _proof.public_values.profileId), _proof.public_values.endpoint);\n        _validateTLSHost(host, _proof.public_values.host);\n\n        onRampId = bytes32(_proof.public_values.profileId.stringToUint(0));\n        offRampId = bytes32(_proof.public_values.mcAccountId.stringToUint(0));\n    }\n\n    /* ============ External Admin Functions ============ */\n\n    function setVerifierSigningKey(address _verifierSigningKey) external onlyOwner {\n        verifierSigningKey = _verifierSigningKey;\n\n        emit VerifierSigningKeySet(_verifierSigningKey);\n    }\n\n    /* ============ View Functions ============ */\n\n    function verifyProof(\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationData memory _publicValues, \n        bytes memory _proof\n    )\n        internal\n        view\n        returns(bool)\n    {   \n        bytes memory encodedMessage = abi.encode(_publicValues.endpoint, _publicValues.host, _publicValues.profileId, _publicValues.mcAccountId);\n        return _isValidVerifierSignature(encodedMessage, _proof, verifierSigningKey);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateProof(\n        IWiseOffRamperRegistrationProcessor.OffRamperRegistrationData memory _publicValues, \n        bytes memory _proof\n    )\n        internal\n        view\n    {   \n        require(\n            verifyProof(_publicValues, _proof),\n            \"Invalid signature from verifier\"\n        );\n    }\n}\n"
    },
    "contracts/ramps/wise/WiseRamp.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"../../external/Uint256ArrayUtils.sol\";\n\nimport { IWiseAccountRegistry } from \"./interfaces/IWiseAccountRegistry.sol\";\nimport { IWiseSendProcessor } from \"./interfaces/IWiseSendProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseRamp is Ownable {\n\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    event DepositReceived(\n        uint256 indexed depositId,\n        bytes32 indexed offRampId,\n        bytes32 indexed currencyId,\n        uint256 amount,\n        uint256 conversionRate\n    );\n    event IntentSignaled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        bytes32 indexed accountId,\n        address to,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event IntentPruned(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId\n    );\n    event IntentFulfilled(\n        bytes32 indexed intentHash,\n        uint256 indexed depositId,\n        address indexed onRamper,\n        address to,\n        uint256 amount,\n        uint256 feeAmount\n    );\n    event DepositWithdrawn(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 amount\n    );\n\n    event DepositClosed(uint256 depositId, address depositor);\n    event MinDepositAmountSet(uint256 minDepositAmount);\n    event MaxOnRampAmountSet(uint256 maxOnRampAmount);\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\n    event OnRampCooldownPeriodSet(uint256 onRampCooldownPeriod);\n    event SustainabilityFeeUpdated(uint256 fee);\n    event SustainabilityFeeRecipientUpdated(address feeRecipient);\n    event NewSendProcessorSet(address sendProcessor);\n\n    /* ============ Structs ============ */\n\n    struct Deposit {\n        address depositor;\n        string wiseTag;\n        address verifierSigningKey;         // Public key of the verifier depositor wants to sign the TLS proof\n        uint256 depositAmount;              // Amount of USDC deposited\n        bytes32 receiveCurrencyId;          // Id of the currency to be received off-chain (bytes32(Wise currency code))\n        uint256 remainingDeposits;          // Amount of remaining deposited liquidity\n        uint256 outstandingIntentAmount;    // Amount of outstanding intents (may include expired intents)\n        uint256 conversionRate;             // Conversion required by off-ramper between USDC/USD\n        bytes32[] intentHashes;             // Array of hashes of all open intents (may include some expired if not pruned)\n    }\n\n    struct DepositWithAvailableLiquidity {\n        uint256 depositId;                  // ID of the deposit\n        bytes32 depositorId;                // Depositor's offRampId \n        Deposit deposit;                    // Deposit struct\n        uint256 availableLiquidity;         // Amount of liquidity available to signal intents (net of expired intents)\n    }\n\n    struct Intent {\n        address onRamper;                   // On-ramper's address\n        address to;                         // Address to forward funds to (can be same as onRamper)\n        uint256 deposit;                    // ID of the deposit the intent is signaling on\n        uint256 amount;                     // Amount of USDC the on-ramper signals intent for on-chain\n        uint256 intentTimestamp;            // Timestamp of when the intent was signaled\n    }\n\n    struct IntentWithOnRamperId {\n        bytes32 intentHash;                 // Intent hash\n        Intent intent;                      // Intent struct\n        bytes32 onRamperId;                 // onRamper's onRamperId\n    }\n\n    // A Global Account is defined as an account represented by one accountId. This is used to enforce limitations on actions across\n    // all Ethereum addresses that are associated with that accountId. In this case we use it to enforce a cooldown period between on ramps,\n    // restrict each Wise account to one outstanding intent at a time, and to enforce deny lists.\n    struct GlobalAccountInfo {\n        bytes32 currentIntentHash;          // Hash of the current open intent (if exists)\n        uint256 lastOnrampTimestamp;        // Timestamp of the last on-ramp transaction used to check if cooldown period elapsed\n        uint256[] deposits;                 // Array of open account deposits\n    }\n\n    /* ============ Modifiers ============ */\n    modifier onlyRegisteredUser() {\n        require(accountRegistry.isRegisteredUser(msg.sender), \"Caller must be registered user\");\n        _;\n    }\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\n    \n    /* ============ State Variables ============ */\n    IERC20 public immutable usdc;                                   // USDC token contract\n    IWiseAccountRegistry public accountRegistry;                    // Account Registry contract for Wise\n    IWiseSendProcessor public sendProcessor;                        // Address of send processor contract\n\n    bool public isInitialized;                                      // Indicates if contract has been initialized\n\n    mapping(bytes32 => GlobalAccountInfo) internal globalAccount;   // Mapping of onRamp ID to information used to enforce actions across Ethereum accounts\n    mapping(uint256 => Deposit) public deposits;                    // Mapping of depositIds to deposit structs\n    mapping(bytes32 => Intent) public intents;                      // Mapping of intentHashes to intent structs\n\n    uint256 public minDepositAmount;                                // Minimum amount of USDC that can be deposited\n    uint256 public maxOnRampAmount;                                 // Maximum amount of USDC that can be on-ramped in a single transaction\n    uint256 public onRampCooldownPeriod;                            // Time period that must elapse between completing an on-ramp and signaling a new intent\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent can be pruned from the system\n    uint256 public sustainabilityFee;                               // Fee charged to on-rampers in preciseUnits (1e16 = 1%)\n    address public sustainabilityFeeRecipient;                      // Address that receives the sustainability fee\n\n    uint256 public depositCounter;                                  // Counter for depositIds\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        IERC20 _usdc,\n        uint256 _minDepositAmount,\n        uint256 _maxOnRampAmount,\n        uint256 _intentExpirationPeriod,\n        uint256 _onRampCooldownPeriod,\n        uint256 _sustainabilityFee,\n        address _sustainabilityFeeRecipient\n    )\n        Ownable()\n    {\n        usdc = _usdc;\n        minDepositAmount = _minDepositAmount;\n        maxOnRampAmount = _maxOnRampAmount;\n        intentExpirationPeriod = _intentExpirationPeriod;\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        sustainabilityFee = _sustainabilityFee;\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Initialize Ramp with the addresses of the Processors\n     *\n     * @param _accountRegistry     Account Registry contract for Wise\n     * @param _sendProcessor       Send processor address\n     */\n    function initialize(\n        IWiseAccountRegistry _accountRegistry,\n        IWiseSendProcessor _sendProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        accountRegistry = _accountRegistry;\n        sendProcessor = _sendProcessor;\n\n        isInitialized = true;\n    }\n\n    /**\n     * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\n     * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\n     * of USDC.\n     *\n     * @param _wiseTag              Depositor's Wise tag to receive payments\n     * @param _receiveCurrencyId    Id of the currency to be received off-chain\n     * @param _depositAmount        The amount of USDC to off-ramp\n     * @param _receiveAmount        The amount of USD to receive\n     * @param _verifierSigningKey   Public key of the verifier depositor wants to sign the TLS proof\n     */\n    function offRamp(\n        string calldata _wiseTag,\n        bytes32 _receiveCurrencyId,\n        uint256 _depositAmount,\n        uint256 _receiveAmount,\n        address _verifierSigningKey\n    )\n        external\n        onlyRegisteredUser\n    {\n        IWiseAccountRegistry.AccountInfo memory account = accountRegistry.getAccountInfo(msg.sender);\n        GlobalAccountInfo storage globalAccountInfo = globalAccount[account.accountId];\n\n        require(account.offRampId != bytes32(0), \"Must be registered as off ramper\");\n        require(keccak256(abi.encode(_wiseTag)) == account.wiseTagHash, \"Wise tag does not match registered wise tag\");\n        require(globalAccountInfo.deposits.length < MAX_DEPOSITS, \"Maximum deposit amount reached\");\n        require(_depositAmount >= minDepositAmount, \"Deposit amount must be greater than min deposit amount\");\n        require(_receiveAmount > 0, \"Receive amount must be greater than 0\");\n\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\n        uint256 depositId = depositCounter++;\n\n        globalAccountInfo.deposits.push(depositId);\n\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            wiseTag: _wiseTag,\n            receiveCurrencyId: _receiveCurrencyId,\n            depositAmount: _depositAmount,\n            remainingDeposits: _depositAmount,\n            outstandingIntentAmount: 0,\n            conversionRate: conversionRate,\n            intentHashes: new bytes32[](0),\n            verifierSigningKey: _verifierSigningKey\n        });\n\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\n\n        emit DepositReceived(depositId, account.accountId, _receiveCurrencyId, _depositAmount, conversionRate);\n    }\n\n    /**\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\n     * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\n     * address (tracked using accountId). Caller must not be on the depositor's deny list. If there are prunable intents then\n     * they will be deleted from the deposit to be able to maintain state hygiene.\n     *\n     * @param _depositId    The ID of the deposit the on-ramper intends to use for \n     * @param _amount       The amount of USDC the user wants to on-ramp\n     * @param _to           Address to forward funds to (can be same as onRamper)\n     */\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external onlyRegisteredUser {\n        bytes32 onRamperId = accountRegistry.getAccountId(msg.sender);\n        Deposit storage deposit = deposits[_depositId];\n\n        // Caller validity checks\n        require(accountRegistry.isAllowedUser(deposit.depositor, onRamperId), \"Onramper on depositor's denylist\");\n        require(\n            globalAccount[onRamperId].lastOnrampTimestamp + onRampCooldownPeriod <= block.timestamp,\n            \"On ramp cool down period not elapsed\"\n        );\n        require(globalAccount[onRamperId].currentIntentHash == bytes32(0), \"Intent still outstanding\");\n        require(accountRegistry.getAccountId(deposit.depositor) != onRamperId, \"Sender cannot be the depositor\");\n\n        // Intent information checks\n        require(deposit.depositor != address(0), \"Deposit does not exist\");\n        require(_amount > 0, \"Signaled amount must be greater than 0\");\n        require(_amount <= maxOnRampAmount, \"Signaled amount must be less than max on-ramp amount\");\n        require(_to != address(0), \"Cannot send to zero address\");\n\n        bytes32 intentHash = _calculateIntentHash(onRamperId, _depositId);\n\n        if (deposit.remainingDeposits < _amount) {\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n        }\n\n        intents[intentHash] = Intent({\n            onRamper: msg.sender,\n            to: _to,\n            deposit: _depositId,\n            amount: _amount,\n            intentTimestamp: block.timestamp\n        });\n\n        globalAccount[onRamperId].currentIntentHash = intentHash;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentHashes.push(intentHash);\n\n        emit IntentSignaled(intentHash, _depositId, onRamperId, _to, _amount, block.timestamp);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\n     * intent. Deposit state is updated to reflect the cancelled intent.\n     *\n     * @param _intentHash    Hash of intent being cancelled\n     */\n    function cancelIntent(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        \n        require(intent.intentTimestamp != 0, \"Intent does not exist\");\n        require(\n            accountRegistry.getAccountId(intent.onRamper) == accountRegistry.getAccountId(msg.sender),\n            \"Sender must be the on-ramper\"\n        );\n\n        Deposit storage deposit = deposits[intent.deposit];\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n    }\n\n    /**\n     * @notice Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated,\n     * intent is removed, and deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _sendData         Struct containing unredacted data from API call to Wise\n     * @param _verifierSignature  Signature by verifier of the unredacted data\n     */\n    function onRamp(\n        IWiseSendProcessor.SendData calldata _sendData,\n        bytes calldata _verifierSignature\n    )\n        external\n    {\n        (\n            Intent memory intent,\n            Deposit storage deposit,\n            bytes32 intentHash\n        ) = _verifyOnRampProof(_sendData, _verifierSignature);\n\n        _pruneIntent(deposit, intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[accountRegistry.getAccountId(intent.onRamper)].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(intentHash, intent);\n    }\n\n    /**\n     * @notice Allows off-ramper to release funds to the on-ramper in case of a failed on-ramp or because of some other arrangement\n     * between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and \n     * deposit state is updated. USDC is transferred to the on-ramper.\n     *\n     * @param _intentHash        Hash of intent to resolve by releasing the funds\n     */\n    function releaseFundsToOnramper(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        Deposit storage deposit = deposits[intent.deposit];\n\n        require(intent.onRamper != address(0), \"Intent does not exist\");\n        require(deposit.depositor == msg.sender, \"Caller must be the depositor\");\n\n        _pruneIntent(deposit, _intentHash);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        globalAccount[accountRegistry.getAccountId(intent.onRamper)].lastOnrampTimestamp = block.timestamp;\n        _closeDepositIfNecessary(intent.deposit, deposit);\n\n        _transferFunds(_intentHash, intent);\n    }\n\n    /**\n     * @notice Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all\n     * remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be\n     * returned. Deposit will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\n     */\n    function withdrawDeposit(uint256[] memory _depositIds) external {\n        uint256 returnAmount;\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit storage deposit = deposits[depositId];\n\n            require(deposit.depositor == msg.sender, \"Sender must be the depositor\");\n\n            (\n                bytes32[] memory prunableIntents,\n                uint256 reclaimableAmount\n            ) = _getPrunableIntents(depositId);\n\n            _pruneIntents(deposit, prunableIntents);\n\n            returnAmount += deposit.remainingDeposits + reclaimableAmount;\n            \n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            emit DepositWithdrawn(depositId, deposit.depositor, deposit.remainingDeposits + reclaimableAmount);\n            \n            delete deposit.remainingDeposits;\n            _closeDepositIfNecessary(depositId, deposit);\n        }\n\n        usdc.transfer(msg.sender, returnAmount);\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the send processor address used for validating and interpreting zk proofs.\n     *\n     * @param _sendProcessor   New send proccesor address\n     */\n    function setSendProcessor(IWiseSendProcessor _sendProcessor) external onlyOwner {\n        sendProcessor = _sendProcessor;\n        emit NewSendProcessorSet(address(_sendProcessor));\n    }\n\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\n     *\n     * @param _minDepositAmount   The new minimum deposit amount\n     */\n    function setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\n        require(_minDepositAmount != 0, \"Minimum deposit cannot be zero\");\n\n        minDepositAmount = _minDepositAmount;\n        emit MinDepositAmountSet(_minDepositAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\n     *\n     * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\n     */\n    function setSustainabilityFee(uint256 _fee) external onlyOwner {\n        require(_fee <= MAX_SUSTAINABILITY_FEE, \"Fee cannot be greater than max fee\");\n\n        sustainabilityFee = _fee;\n        emit SustainabilityFeeUpdated(_fee);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\n     *\n     * @param _feeRecipient   The new fee recipient address\n     */\n    function setSustainabilityFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), \"Fee recipient cannot be zero address\");\n\n        sustainabilityFeeRecipient = _feeRecipient;\n        emit SustainabilityFeeRecipientUpdated(_feeRecipient);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than\n     * this amount a user must make multiple transactions.\n     *\n     * @param _maxOnRampAmount   The new max on ramp amount\n     */\n    function setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\n        require(_maxOnRampAmount != 0, \"Max on ramp amount cannot be zero\");\n\n        maxOnRampAmount = _maxOnRampAmount;\n        emit MaxOnRampAmountSet(_maxOnRampAmount);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this\n     * amount of time before they can signalIntent to on-ramp again.\n     *\n     * @param _onRampCooldownPeriod   New on-ramp cooldown period\n     */\n    function setOnRampCooldownPeriod(uint256 _onRampCooldownPeriod) external onlyOwner {\n        onRampCooldownPeriod = _onRampCooldownPeriod;\n        emit OnRampCooldownPeriodSet(_onRampCooldownPeriod);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\n     * locking up a depositor's funds.\n     *\n     * @param _intentExpirationPeriod   New intent expiration period\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        require(_intentExpirationPeriod != 0, \"Max intent expiration period cannot be zero\");\n\n        intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\n    }\n\n\n    /* ============ External View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\n        return deposits[_depositId];\n    }\n\n    function getIdCurrentIntentHash(address _account) public view returns (bytes32) {\n        return globalAccount[accountRegistry.getAccountId(_account)].currentIntentHash;\n    }\n\n    function getIdCurrentIntentHashAsUint(address _account) external view returns (uint256) {\n        return uint256(getIdCurrentIntentHash(_account));\n    }\n\n    function getLastOnRampTimestamp(address _account) external view returns (uint256) {\n        return globalAccount[accountRegistry.getAccountId(_account)].lastOnrampTimestamp;\n    }\n\n    function getIntentsWithOnRamperId(bytes32[] calldata _intentHashes) external view returns (IntentWithOnRamperId[] memory) {\n        IntentWithOnRamperId[] memory intentsWithOnRamperId = new IntentWithOnRamperId[](_intentHashes.length);\n\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\n            bytes32 intentHash = _intentHashes[i];\n            Intent memory intent = intents[intentHash];\n            intentsWithOnRamperId[i] = IntentWithOnRamperId({\n                intentHash: _intentHashes[i],\n                intent: intent,\n                onRamperId: accountRegistry.getAccountId(intent.onRamper)\n            });\n        }\n\n        return intentsWithOnRamperId;\n    }\n\n    function getAccountDeposits(address _account) external view returns (DepositWithAvailableLiquidity[] memory accountDeposits) {\n        uint256[] memory accountDepositIds = globalAccount[accountRegistry.getAccountId(_account)].deposits;\n        accountDeposits = new DepositWithAvailableLiquidity[](accountDepositIds.length);\n        \n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\n            uint256 depositId = accountDepositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            accountDeposits[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                depositorId: accountRegistry.getAccountId(deposit.depositor),\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n    }\n\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            Deposit memory deposit = deposits[depositId];\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\n\n            depositArray[i] = DepositWithAvailableLiquidity({\n                depositId: depositId,\n                depositorId: accountRegistry.getAccountId(deposit.depositor),\n                deposit: deposit,\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\n            });\n        }\n\n        return depositArray;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Calculates the intentHash of new intent\n     */\n    function _calculateIntentHash(\n        bytes32 _accountId,\n        uint256 _depositId\n    )\n        internal\n        view\n        virtual\n        returns (bytes32 intentHash)\n    {\n        // Mod with circom prime field to make sure it fits in a 254-bit field\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_accountId, _depositId, block.timestamp)));\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\n        prunableIntents = new bytes32[](intentHashes.length);\n\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            Intent memory intent = intents[intentHashes[i]];\n            if (intent.intentTimestamp + intentExpirationPeriod < block.timestamp) {\n                prunableIntents[i] = intentHashes[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != bytes32(0)) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's currentIntentHash in\n     * their global account mapping, and deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\n        Intent memory intent = intents[_intentHash];\n\n        delete globalAccount[accountRegistry.getAccountId(intent.onRamper)].currentIntentHash;\n        delete intents[_intentHash];\n        _deposit.intentHashes.removeStorage(_intentHash);\n\n        emit IntentPruned(_intentHash, intent.deposit);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accounts mapping.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            globalAccount[accountRegistry.getAccountId(_deposit.depositor)].deposits.removeStorage(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Checks if sustainability fee has been defined, if so sends fee to the fee recipient and intent amount minus fee\n     * to the on-ramper. If sustainability fee is undefined then full intent amount is transferred to on-ramper.\n     */\n    function _transferFunds(bytes32 _intentHash, Intent memory _intent) internal {\n        uint256 fee;\n        if (sustainabilityFee != 0) {\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\n            usdc.transfer(sustainabilityFeeRecipient, fee);\n        }\n\n        uint256 onRampAmount = _intent.amount - fee;\n        usdc.transfer(_intent.to, onRampAmount);\n\n        emit IntentFulfilled(_intentHash, _intent.deposit, _intent.onRamper, _intent.to, onRampAmount, fee);\n    }\n\n    /**\n     * @notice Validate send payment email and check that it hasn't already been used (done on SendProcessor).\n     * Additionally, we validate that the offRamperId matches the one from the specified intent and that enough\n     * was paid off-chain inclusive of the conversionRate.\n     */\n    function _verifyOnRampProof(\n        IWiseSendProcessor.SendData calldata _data,\n        bytes calldata _verifierSignature\n    )\n        internal\n        returns(Intent storage intent, Deposit storage deposit, bytes32 intentHash)\n    {\n        intentHash = bytes32(_data.intentHash);\n        intent = intents[intentHash];\n        require(intent.onRamper == msg.sender, \"Caller must be the on-ramper\");\n\n        deposit = deposits[intent.deposit];\n\n        (\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperId,\n            bytes32 currencyId\n        ) = sendProcessor.processProof(\n            IWiseSendProcessor.SendProof({\n                public_values: _data,\n                proof: _verifierSignature\n            }),\n            deposit.verifierSigningKey\n        );\n\n        require(currencyId == deposit.receiveCurrencyId, \"Wrong currency sent\");\n        require(intent.intentTimestamp <= timestamp, \"Intent was not created before send\");\n        require(accountRegistry.getAccountInfo(deposit.depositor).offRampId == offRamperId, \"Offramper id does not match\");\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \"Payment was not enough\");\n    }\n}\n"
    },
    "contracts/ramps/wise/WiseSendProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { SignatureChecker } from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\nimport { IKeyHashAdapterV2 } from \"../../processors/keyHashAdapters/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"../../processors/nullifierRegistries/INullifierRegistry.sol\";\nimport { IWiseSendProcessor } from \"./interfaces/IWiseSendProcessor.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\nimport { TLSBaseProcessor } from \"../../processors/TLSBaseProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseSendProcessor is IWiseSendProcessor, TLSBaseProcessor {\n\n    using ECDSA for bytes32;\n    using SignatureChecker for address;\n    using StringConversionUtils for string;\n\n    /* ============ Constants ============ */\n    bytes32 public constant PAYMENT_STATUS = keccak256(abi.encodePacked(\"OUTGOING_PAYMENT_SENT\"));\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        string memory _endpoint,\n        string memory _host\n    )\n        TLSBaseProcessor(\n            _ramp,\n            _nullifierRegistry,\n            _timestampBuffer,\n            _endpoint,\n            _host\n        )\n    {}\n    \n    /* ============ External Functions ============ */\n    function processProof(\n        IWiseSendProcessor.SendProof calldata _proof,\n        address _verifierSigningKey\n    )\n        public\n        override\n        onlyRamp\n        returns(\n            uint256 amount,\n            uint256 timestamp,\n            bytes32 offRamperId,\n            bytes32 currencyId\n        )\n    {\n        _validateProof(_verifierSigningKey, _proof.public_values, _proof.proof);\n\n        _validateTLSEndpoint(\n            endpoint.replaceString(\"*\", _proof.public_values.senderId),\n            _proof.public_values.endpoint\n        );\n        _validateTLSHost(host, _proof.public_values.host);\n        \n        // Validate status\n        require(\n            keccak256(abi.encodePacked(_proof.public_values.status)) == PAYMENT_STATUS,\n            \"Payment status not confirmed as sent\"\n        );\n        _validateAndAddNullifier(keccak256(abi.encodePacked(\"Wise\", _proof.public_values.transferId)));\n\n        amount = _proof.public_values.amount.stringToUint(6);\n\n        // Add the buffer to build in flexibility with L2 timestamps\n        timestamp = _proof.public_values.timestamp.stringToUint(0) / 1000 + timestampBuffer;\n\n        offRamperId = bytes32(_proof.public_values.recipientId.stringToUint(0));\n        currencyId = keccak256(abi.encodePacked(_proof.public_values.currencyId));\n    }\n\n    /* ============ View Functions ============ */\n\n    function verifyProof(\n        address _verifierSigningKey,\n        IWiseSendProcessor.SendData memory _publicValues, \n        bytes memory _proof\n    )\n        internal\n        view\n        returns(bool)\n    {   \n        bytes memory encodedMessage = abi.encode(\n            _publicValues.endpoint,\n            _publicValues.host,\n            _publicValues.transferId,\n            _publicValues.senderId,\n            _publicValues.recipientId,\n            _publicValues.amount,\n            _publicValues.currencyId,\n            _publicValues.status,\n            _publicValues.timestamp,\n            _publicValues.intentHash\n        );\n        return _isValidVerifierSignature(encodedMessage, _proof, _verifierSigningKey);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateProof(\n        address _verifierSigningKey,\n        IWiseSendProcessor.SendData memory _publicValues, \n        bytes memory _proof\n    )\n        internal\n        view\n    {   \n        require(\n            verifyProof(_verifierSigningKey, _publicValues, _proof),\n            \"Invalid signature from verifier\"\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}